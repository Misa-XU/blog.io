<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build using CMake on Windows</title>
    <url>/cmake/</url>
    <content><![CDATA[<p><strong>Building</strong> is a fairly general term without strict definition; It usually refers to the <strong>whole</strong> process that outputing the final product (an executable or a library) from source materials. Depending on the requirements, <strong>building</strong> will involve several of the following: <em>pre-processing</em>, <em>compiling</em>, <em>linking</em>, <em>converting data files</em>, <em>automatically testing</em>, <em>packaging</em>.</p>
<p>Among the tools that defining the building behaviors for <code>Platform Dependent</code> products whose programming language usually be <code>C</code> or <code>C++</code>, <strong>CMake</strong> is the most popular one as it is <strong>open-source and cross-platform</strong>. The building process with <strong>CMake</strong> takes place in two stages:</p>
<ol type="1">
<li>Given abstract, <code>platform and compiler independent</code> building procedures defined by developers, generating standard <code>Makefile</code> or <code>Project Files</code> for IDEs (Visual Studio, Xcode etc.) .</li>
<li>Invoke the desired <code>native build tool</code> to undertake the actual building process.</li>
</ol>
<p>Here we introduce the usage of CMake. The environment of this tutorial is <code>Windows 10</code>; The output of each command will be different from that running on Linux. For the syntax of CMake Language, you may visit <a href="/cmake-syntax">CMake Syntax</a> for details.</p>
<a id="more"></a>
<h1 id="hello-world">Hello World</h1>
<p>The following is a good starting point for learning about CMake.</p>
<ol type="1">
<li>Create a new folder <code>test</code>.</li>
<li>Under the directory, create the source file <code>main.cpp</code>. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World from test Main!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Create the CMake file named exactly <code>CMakeLists.txt</code> <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(Main)</span><br><span class="line"><span class="keyword">add_executable</span>(Main main.cpp)</span><br></pre></td></tr></table></figure></li>
<li>Run <code>cmake .</code> to generate native <code>project files</code>. Under <code>Windows</code>, CMake will generate a <code>Visual Studio</code> project by default. When finished, lots of contents created in the directory: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">│  ALL_BUILD.vcxproj</span><br><span class="line">│  ALL_BUILD.vcxproj.filters</span><br><span class="line">│  CMakeCache.txt</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  cmake_install.cmake</span><br><span class="line">│  main.cpp</span><br><span class="line">│  Main.sln</span><br><span class="line">│  Main.vcxproj</span><br><span class="line">│  Main.vcxproj.filters</span><br><span class="line">│  ZERO_CHECK.vcxproj</span><br><span class="line">│  ZERO_CHECK.vcxproj.filters</span><br><span class="line">└─CMakeFiles/</span><br></pre></td></tr></table></figure></li>
<li>Run <code>cmake --build .</code> to create executable. You could find the <code>Main.exe</code> in <code>&lt;root-dir&gt;/Debug</code>. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">│  ALL_BUILD.vcxproj</span><br><span class="line">│  ALL_BUILD.vcxproj.filters</span><br><span class="line">│  CMakeCache.txt</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  cmake_install.cmake</span><br><span class="line">│  main.cpp</span><br><span class="line">│  Main.sln</span><br><span class="line">│  Main.vcxproj</span><br><span class="line">│  Main.vcxproj.filters</span><br><span class="line">│  ZERO_CHECK.vcxproj</span><br><span class="line">│  ZERO_CHECK.vcxproj.filters</span><br><span class="line">├─CMakeFiles/</span><br><span class="line">├─Debug/</span><br><span class="line">│      Main.exe</span><br><span class="line">│      Main.ilk</span><br><span class="line">│      Main.pdb</span><br><span class="line">├─Main.dir/</span><br><span class="line">└─x64/</span><br></pre></td></tr></table></figure></li>
<li>Run executable via <code>Debug\Main.exe</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello World from <span class="built_in">test</span> Main!</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="explanation">Explanation</h2>
<h3 id="generate-a-project-buildsystem">Generate a Project Buildsystem</h3>
<p>To generate a <code>buildsystem</code> with CMake, the following must be defined:</p>
<ul>
<li><code>Source Tree</code>: The <em>top-level directory</em> containing <strong>source files</strong> provided by the project. Then the generation will start with <code>CMakeLists.txt</code> under this directory.</li>
<li><code>Build Tree</code>: The <em>top-level directory</em> where <strong>buildsystem files</strong> and <strong>output artifacts</strong> being placed. CMake will also create a <code>CMakeCache.txt</code> here to store persistent information.</li>
<li><code>Generator</code>: The type of buildsystem to generate. If not specified, CMake will choose the proper one automatically. When using one of the <strong>Command-Line Build Tool Generators</strong> CMake expects that the environment needed by the compiler toolchain is already configured in the shell. When using one of the <strong>IDE Build Tool Generators</strong>, no particular environment is needed.</li>
</ul>
<p>You could run CMake with one of the following command signatures to specify them.</p>
<ol type="1">
<li><code>cmake [&lt;options&gt;] &lt;path-to-source&gt;</code>: Then the current directory is the <strong>build tree</strong>, <code>&lt;path-to-source&gt;</code> is the <strong>source tree</strong>. Both absolute an relative path is valid. The <strong>source tree</strong> must contain a <code>CMakeLists.txt</code> file and must not contain a <code>CMakeCache.txt</code> file.</li>
<li><code>cmake [&lt;options&gt;] &lt;path-to-existing-build&gt;</code>: Then <code>&lt;path-to-existing-build&gt;</code> is the <strong>build tree</strong> which must contain a <code>CMakeCache.txt</code> file because CMake will load the <strong>source tree</strong> from it.</li>
<li><code>cmake [&lt;options&gt;] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</code>. Specify both <code>&lt;path-to-build&gt;</code> and <code>&lt;path-to-source&gt;</code>. The source tree must contain a <code>CMakeLists.txt</code> file; The build tree will be created automatically if it does not already exist.</li>
</ol>
<h4 id="options">Options</h4>
<p>For the full list of options please visit <a href="https://cmake.org/cmake/help/latest/manual/cmake.1.html#options" class="uri">https://cmake.org/cmake/help/latest/manual/cmake.1.html#options</a> or <code>cmake --help</code></p>
<ul>
<li><code>-C &lt;initial-cache&gt;</code>: Pre-load a script that contains a list of <code>set()</code> commands to initialize the cache values. The loaded entries take priority over the project’s default values.</li>
<li><code>-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;</code> or <code>-D &lt;var&gt;=&lt;value&gt;</code>: Create or update a CMake CACHE entry.</li>
<li><code>-G &lt;generator-name&gt;</code> Specify a build system generator. Run <code>cmake --help</code> to get the name of supported generators</li>
<li><code>--log-level=&lt;ERROR|WARNING|NOTICE|STATUS|VERBOSE|DEBUG|TRACE&gt;</code>: Set the log level. The <code>message()</code> command will only output messages of the specified log level or higher. The default log level is <code>STATUS</code>.</li>
</ul>
<h3 id="build-a-project">Build a Project</h3>
<p>Use <code>cmake --build &lt;dir&gt; [&lt;options&gt;] [-- &lt;build-tool-options&gt;]</code> to build an already-generated project binary tree.</p>
<ul>
<li><code>--build &lt;dir&gt;</code> The binary directory when building.</li>
<li><code>--parallel [&lt;jobs&gt;], -j [&lt;jobs&gt;]</code>: Specify the maximum number of concurrent processes. If <code>&lt;jobs&gt;</code> is omitted, use the default number.</li>
<li><code>--target &lt;tgt&gt;..., -t &lt;tgt&gt;...</code>: Build specific <code>&lt;tgt&gt;</code>s .</li>
<li><code>--config &lt;cfg&gt;</code>: For multi-configuration tools, choose specific <code>&lt;cfg&gt;</code>.</li>
<li><code>--clean-first</code>: Clean existing built target and re-build it.</li>
<li><code>-target clean</code>: Clean existing built target only.</li>
</ul>
<h3 id="output-message">Output message</h3>
<p><code>message([SEND_ERROR|STATUS|FATAL_ERROR|DEBUG|TRACE] &quot;message text&quot; ...)</code></p>
<p>CMake displays <code>STATUS</code> to <code>TRACE</code> messages on <strong>stdout</strong> with prefix <code>--</code>; All other message types are sent to <strong>stderr</strong>. <code>FATAL_ERROR</code> will terminate the process immediately whereas <code>CMake Error</code> stops generation only but continues processing.</p>
<h3 id="set-project-name">Set Project Name</h3>
<p><code>project(&lt;PROJECT-NAME&gt; [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]])</code></p>
<p>This command will set the name of the project and store it in <code>PROJECT_NAME</code>. When called from the top-level <code>CMakeLists.txt</code>, it will also store the project name in <code>CMAKE_PROJECT_NAME</code>. Simultaneously, the variables <code>PROJECT_SOURCE_DIR</code>, <code>&lt;PROJECT-NAME&gt;_SOURCE_DIR</code>, <code>PROJECT_BINARY_DIR</code>, <code>&lt;PROJECT-NAME&gt;_BINARY_DIR</code> will be defined according to the absolute path of the corresponding directory.</p>
<h3 id="add-executable">Add Executable</h3>
<p><code>add_executable(&lt;name&gt; [source1] [source2 ...])</code></p>
<p>This command will add an executable target called <code>&lt;name&gt;</code> to be built from the source files listed in the command invocation; The source files can also be added later using <code>target_sources()</code>. The <code>&lt;name&gt;</code> must be globally unique within a project. By default the executable will be created in the <strong>build tree</strong> directory with the name <code>&lt;name&gt;</code> or <code>&lt;name&gt;.exe</code> depending on the native platform.</p>
<h3 id="in-source-and-out-of-source-build">In-Source and Out-of-Source Build</h3>
<p>Some build trees created with GNU autotools have a <code>make distclean</code> command that removes Makefiles and others belonging to the generated build system. However, CMake has no way to track exactly which files are generated by itself. Therefore, it's recommended to adopt the <code>out-of-source</code> build ---- placing the build tree separately from the source tree. Then one can clean the build by clear or delete the build tree without affect the original source files.</p>
<h1 id="a-better-hello-world">A Better Hello World</h1>
<h2 id="reorganize-the-project-directory">Reorganize the Project Directory</h2>
<ol type="1">
<li>Create <code>src/</code> to place source files</li>
<li>Create <code>CMakeLists.txt</code> under <code>src/</code></li>
<li>Create <code>build/</code> to place buildsystem</li>
</ol>
<p>After that, the structure of our project will be</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|   CMakeLists.txt</span><br><span class="line">|</span><br><span class="line">+---build</span><br><span class="line">|   \---bin</span><br><span class="line">\---src</span><br><span class="line">        CMakeLists.txt</span><br><span class="line">        main.cpp</span><br></pre></td></tr></table></figure>
<h2 id="config-source-and-binary-directory">Config Source and Binary Directory</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir])</span><br></pre></td></tr></table></figure>
<p>This command will add <code>source_dir</code> run its <code>CMakeLists.txt</code>; A relative path will be evaluated with respect to the <strong>current directory</strong>. The <code>binary_dir</code> specifies the directory in which to place the output files. Both relative path and absolute path are valid; A relative path it will be evaluated with respect to the <strong>current output directory</strong>. If <code>binary_dir</code> is not specified, the value of <code>source_dir</code> before expanding will be used.</p>
<p>In top-level <code>CMakeLists.txt</code> become: <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(Main)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(src/ main)</span><br></pre></td></tr></table></figure></p>
<h2 id="config-source-directory">Config Source Directory</h2>
<p>It's tedious to list all source files manually, regardless of using <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">project</span> source1.c source2.c)</span><br></pre></td></tr></table></figure></p>
<p>or</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(DIR source1.c source2.c)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">project</span> <span class="variable">$&#123;DIR&#125;</span>)</span><br></pre></td></tr></table></figure>
<p><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code> will collects the names of all the source files in <code>&lt;dir&gt;</code> and stores the list in the <code>&lt;variable&gt;</code>. Note that there is no way for the build system that knows when a new source file has been added; When a new source is just added to the directory, one would have to manually rerun CMake to generate a build system incorporating the new file.</p>
<p>In <code>CMakeLists.txt</code> of <code>src/</code>, add</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_DIR)</span><br><span class="line"><span class="keyword">add_executable</span>(Main <span class="variable">$&#123;SRC_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="config-binary-directory">Config Binary Directory</h2>
<p>In <code>CMakeLists.txt</code> of <code>src/</code>, add <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_DIR)</span><br><span class="line"><span class="keyword">add_executable</span>(Main <span class="variable">$&#123;SRC_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure></p>
<h2 id="specify-the-c-standard">Specify the C++ Standard</h2>
<p>In top-level <code>CMakeLists.txt</code>, add</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="add-configured-header-file">Add Configured Header File</h2>
<h3 id="add-a-version-number">Add a Version Number</h3>
<p>Add the version number in <code>project</code>.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(Main VERSION <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>
<p>Then the variables <code>PROJECT_VERSION</code>, <code>&lt;PROJECT-NAME&gt;_VERSION</code>, <code>PROJECT_VERSION_MAJOR</code>, <code>&lt;PROJECT-NAME&gt;_VERSION_MAJOR</code>, <code>PROJECT_VERSION_MINOR</code>, <code>&lt;PROJECT-NAME&gt;_VERSION_MINOR</code>, <code>PROJECT_VERSION_PATCH</code>, <code>&lt;PROJECT-NAME&gt;_VERSION_PATCH</code>, <code>PROJECT_VERSION_TWEAK</code>, <code>&lt;PROJECT-NAME&gt;_VERSION_TWEAK</code> will be defined accordingly.</p>
<h3 id="add-a-configured-header-file">Add a Configured Header File</h3>
<p>It's also valid to specify the version number directly in the source code,; Using <code>CMakeLists.txt</code> provides more flexibility. Under <code>src/</code>, create a new file <code>config.h.in</code> with the following content:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define PROJECT_VERSION_MAJOR @PROJECT_VERSION_MAJOR@</span></span><br><span class="line"><span class="comment">#define PROJECT_VERSION_MINOR @PROJECT_VERSION_MINOR@</span></span><br></pre></td></tr></table></figure>
<p><code>configure_file(&lt;input&gt; &lt;output&gt;)</code> will copy the <code>&lt;input&gt;</code> to an <code>&lt;output&gt;</code> file with the evaulated values referenced as <code>@VAR@</code> or <code>$&#123;VAR&#125;</code>. Each variable reference will be replaced with the current value of the variable, or the empty string if the variable is not defined.</p>
<p>The configured file will be written into the <code>$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</code>; We must add that directory to the list of paths to search for include files. In <code>src/CMakeLists.txt</code>, add</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">configure_file</span>(config.h.in config.h)</span><br><span class="line"><span class="keyword">target_include_directories</span>(Main PUBLIC <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>
<p><code>target_include_directories(&lt;target&gt; &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]) [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])</code> specifies <strong>include directories</strong> to when compiling a given target. The named <code>&lt;target&gt;</code> must have been defined by such as <code>add_executable()</code> or <code>add_library()</code>.</p>
<p>Finally, in <code>main.cpp</code>, let's include the header file and print the version number.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;config.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World from test Main!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The Major Version is %s and the Minor Version is %s\n&quot;</span> , PROJECT_VERSION_MAJOR, PROJECT_VERSION_MINOR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="a-complex-hello-world">A Complex Hello World</h1>
<h2 id="add-math-library">Add Math Library</h2>
<p>Create <code>math/</code> under <code>src/</code>, add <code>CMakeLists.txt</code>, <code>MathFunctions.cpp</code> with <code>MathFunctions.h</code></p>
<p><code>MathFunctions.h</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>MathFunctions.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MathFunctions.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = base;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; exponent; ++i)&#123;</span><br><span class="line">        result = result * base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>src/math/CMakeLists.txt</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_LIB_SRCS)</span><br></pre></td></tr></table></figure>
<p>After that, the structure will be</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">|   CMakeLists.txt</span><br><span class="line">|</span><br><span class="line">+---build</span><br><span class="line">\---src</span><br><span class="line">    |   CMakeLists.txt</span><br><span class="line">    |   config.h.in</span><br><span class="line">    |   main.cpp</span><br><span class="line">    |</span><br><span class="line">    \---<span class="keyword">math</span></span><br><span class="line">            CMakeLists.txt</span><br><span class="line">            MathFunctions.cpp</span><br><span class="line">            MathFunctions.h</span><br></pre></td></tr></table></figure>
<h2 id="build-and-use-static-library">Build and Use Static Library</h2>
<p>In <code>src/math/CMakeLists.txt</code>, add <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">add_library</span> (MathFunctions <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>add_library(&lt;name&gt; [STATIC | SHARED] [source1] [source2 ...])</code> will add a library target called <code>&lt;name&gt;</code>.</p>
<p>The top-level <code>CMakeLists.txt</code> become: <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(Main VERSION <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(src/<span class="keyword">math</span> <span class="keyword">math</span>) <span class="comment">#process math first</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src/ main)</span><br></pre></td></tr></table></figure></p>
<p>The <code>src/CMakeLists.txt</code> become: <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_DIR)</span><br><span class="line"><span class="keyword">add_executable</span>(Main <span class="variable">$&#123;SRC_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">configure_file</span>(config.h.in config.h)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(Main PUBLIC MathFunctions) <span class="comment"># link the library</span></span><br><span class="line"><span class="keyword">target_include_directories</span>(Main PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span> <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">math</span>) <span class="comment"># include the directory of `MathFunctions.h`</span></span><br></pre></td></tr></table></figure></p>
<p>The structure become</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">|   CMakeLists.txt</span><br><span class="line">|   compile.bat</span><br><span class="line">|   README.txt</span><br><span class="line">|</span><br><span class="line">+---build</span><br><span class="line">|   +---bin</span><br><span class="line">|   |   \---Debug</span><br><span class="line">|   |           Main.exe</span><br><span class="line">|   |           Main.ilk</span><br><span class="line">|   |           Main.pdb</span><br><span class="line">|   |</span><br><span class="line">|   \---lib</span><br><span class="line">|       \---Debug</span><br><span class="line">|               MathFunctions.lib</span><br><span class="line">|               MathFunctions.pdb</span><br><span class="line">|</span><br><span class="line">\---src</span><br><span class="line">    |   CMakeLists.txt</span><br><span class="line">    |   config.h.in</span><br><span class="line">    |   main.cpp</span><br><span class="line">    |</span><br><span class="line">    \---<span class="keyword">math</span></span><br><span class="line">            CMakeLists.txt</span><br><span class="line">            MathFunctions.cpp</span><br><span class="line">            MathFunctions.h</span><br></pre></td></tr></table></figure>
<h2 id="build-and-use-dynamic-library">Build and use Dynamic Library</h2>
<p><code>src/math/CMakeLists.txt</code> become</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_LIB_SRCS)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">add_library</span> (MathFunctions SHARED <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span>) <span class="comment"># to build a shared library</span></span><br></pre></td></tr></table></figure>
<p><code>MathFunctions.h</code> become</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span>  __declspec( dllexport )  <span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>;<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p><code>src/CMakeLists.txt</code> become:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_DIR)</span><br><span class="line"><span class="keyword">add_executable</span>(Main <span class="variable">$&#123;SRC_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">configure_file</span>(config.h.in config.h)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib/Debug) <span class="comment"># link the directory of .lib</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(Main PUBLIC MathFunctions)</span><br><span class="line"><span class="keyword">target_include_directories</span>(Main PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span> <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">math</span>)</span><br></pre></td></tr></table></figure>
<p>Then the structrue become</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">|   CMakeLists.txt</span><br><span class="line">|</span><br><span class="line">+---build</span><br><span class="line">|   +---bin</span><br><span class="line">|   |   \---Debug</span><br><span class="line">|   |           Main.exe</span><br><span class="line">|   |           Main.ilk</span><br><span class="line">|   |           Main.pdb</span><br><span class="line">|   |</span><br><span class="line">|   \---lib</span><br><span class="line">|       \---Debug</span><br><span class="line">|               MathFunctions.dll</span><br><span class="line">|               MathFunctions.exp</span><br><span class="line">|               MathFunctions.ilk</span><br><span class="line">|               MathFunctions.lib</span><br><span class="line">|               MathFunctions.pdb</span><br><span class="line">|</span><br><span class="line">\---src</span><br><span class="line">    |   CMakeLists.txt</span><br><span class="line">    |   config.h.in</span><br><span class="line">    |   main.cpp</span><br><span class="line">    |</span><br><span class="line">    \---<span class="keyword">math</span></span><br><span class="line">            CMakeLists.txt</span><br><span class="line">            MathFunctions.cpp</span><br><span class="line">            MathFunctions.h</span><br></pre></td></tr></table></figure>
<p>When running with dynamic-linked library, you should put the <code>.dll</code>s under the same folder of <code>.exe</code>.</p>
<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/" class="uri">https://cmake.org/cmake/help/latest/guide/tutorial/</a> <a href="https://cliutils.gitlab.io/modern-cmake/" class="uri">https://cliutils.gitlab.io/modern-cmake/</a></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT and Github Pages</title>
    <url>/hexo-next/</url>
    <content><![CDATA[<p><code>Hexo</code> is a prominent framework for building personal websites, with a good compatibility with <code>Markdown</code>, <code>MathJax</code> and NPM packages. As a matural ecosystem, there're hundreds of easy-to-use themes and plugins with detailed documentations available on the official website.</p>
<p>Among them, <code>NexT</code> is the preferable one as it not only provides a elegent and customizable appearance, it also integrates with tons of commonly-used tools like <code>git-commit</code>, <code>google analytics</code>, <code>quicklink</code>, <code>Valine</code> etc. In most cases, modifying config file is enough to activate those functions.</p>
<p>In this article, I will not repeat the contents that have already been well-informed on the official website; Just links towards such contents will be provided. Instead, I will introduce some add-on functions and emphasize on the points where I used to get stuck in.</p>
<a id="more"></a>
<h1 id="create-repository">Create Repository</h1>
<ol type="1">
<li>Create a new Repository named <code>&lt;user-name&gt;.github.io</code>.</li>
<li>Find the section <code>&lt;Your Repo&gt; / Settings / Options / Github Pages</code>, set the <code>Source</code> be <code>Master Branch</code> <img src="gitpage.png" /></li>
</ol>
<h1 id="configurate-development-environment">Configurate Development Environment</h1>
<ol type="1">
<li>Make sure Node.js and NPM are ready; Install <code>Hexo</code> globally. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li>Create a hexo project. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;projectname&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li>Download the theme <code>NexT</code>. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li>Apply the theme <code>NexT</code>. Under the root directory of the project, you will find <code>_config.yml</code> inside it. In <code>line 101</code>, set the theme to <code>next</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
<li>Update <code>NexT</code>. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li>
<li>Configurate <code>NexT</code>. Please visit https://hexo.io/docs/configuration.html to learn the configuration of the hexo project. Please Visit https://theme-next.iissnan.com/ to learn the configuration of the theme <code>NexT</code>.</li>
</ol>
<h1 id="commonly-used-commands">Commonly-used Commands</h1>
<p>Please Visit https://hexo.io/docs/commands.html for further details.</p>
<h2 id="create-new-page">Create New Page</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>Creates a new <code>.md</code> file. If the title contains spaces, surround it with quotation marks. <code>[layout]</code> is optional. If a customized layout is preferred, put it under <code>&lt;root-dir&gt;/scaffolds</code> and passing the name of it when creating.</p>
<h2 id="run-website-locally">Run Website Locally</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<p>The command above will set up a localhost server for testing. The port number by default is <code>4000</code>, change it by passing <code>-p &lt;port-number&gt;</code> if required; <code>--debug</code> is also optional.</p>
<div class="note info">
            <p>During running, all changes in <code>_config.yml</code> of <code>NexT</code>, and in <code>&lt;root-dir&gt;/sources/</code> will be rendered instantly.</p>
          </div>
<h2 id="generate-static-files">Generate Static files</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure>
<p>All static files will be put in <code>&lt;root-dir&gt;/public</code></p>
<h2 id="clean-the-output">Clean the output</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>This will remove the <code>db.json</code> and and <code>&lt;root-dir&gt;/public/</code></p>
<h2 id="deploy-to-github">Deploy to Github</h2>
<h3 id="define-deploy-behavior-to-github">Define Deploy Behavior to Github</h3>
<h4 id="install-library">Install Library</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<h4 id="configurate">Configurate</h4>
<p><code>_config.yml</code> under <code>&lt;root-dir&gt;</code>, find the <code>deploy</code> section in the end of the file</p>
<h4 id="basic-settings">Basic Settings</h4>
<p>Just define the colum <code>repo</code> as the address of your repository <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Misa-XU/misa-xu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure> <img src="deploy_input.png" /></p>
<h4 id="skip-the-authentication-process">Skip the Authentication Process</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:misa-xu/misa-xu.github.io.git <span class="comment"># Github SSH</span></span><br><span class="line">    <span class="comment"># github: https://github.com/cylong1016/cylong1016.github.io.git # Github HTTPS</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h1 id="plugin-configuration">Plugin Configuration</h1>
<h2 id="mathjax">-MathJax</h2>
<div class="note warning">
            <p>The <code>-</code> before <code>MathJax</code> in the title is intended. As before loading, Js will check whether <code>MathJax</code> is defined. Directly naming a title called <code>MathJax</code> will make it be defined; Then unexpected errors happen.</p>
          </div>
<h3 id="configurate-1">Configurate</h3>
<p>In <code>&lt;root-dir&gt;/themes/next/_config.yml</code>, set enable of MathJax be true. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    mhchem: <span class="literal">false</span>  <span class="comment"># If chemistry formula is required</span></span><br></pre></td></tr></table></figure></p>
<h3 id="usage">Usage</h3>
<p>In the front matter of the article, set the usage of mathjax be true <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mathjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure> Then you can type math formulas <span class="math display">\[\sqrt{2}\]</span></p>
<p><span class="math display">\[\begin{align}
a &amp;= b + c \label{eq3} \\
x &amp;= yz \label{eq4}\\
l &amp;= m - n \label{eq5}
\end{align}\]</span></p>
<h2 id="local-search">Local Search</h2>
<h3 id="install">Install</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h3 id="configurate-2">Configurate</h3>
<p>Under <code>_config.yml</code> under <code>&lt;root-dir&gt;</code>, add the following block at arbitrary position.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<h3 id="activate">Activate</h3>
<p>In <code>&lt;root-dir&gt;/themes/next/_config.yml</code>, enable local search <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p>
<h3 id="usage-1">Usage</h3>
<p>Click <code>Search</code> on the side bar, and input keywords <img src="local_search.png" /></p>
<h2 id="sitemap">SiteMap</h2>
<h3 id="install-1">Install</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<h3 id="configurate-3">Configurate</h3>
<p>In <code>&lt;root-dir&gt;/_config.xml</code>, add the following</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins: hexo-generator-sitemap</span><br></pre></td></tr></table></figure>
<h3 id="usage-2">Usage</h3>
<p>For each <code>generate</code> operation, a sitemap called <code>sitemap.xml</code> will be automatically created under <code>&lt;root-dir&gt;/public/</code></p>
<h1 id="create-content">Create Content</h1>
<h2 id="create-new-page-1">Create New Page</h2>
<p>One should run the following command to create new page.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p><code>layout</code> by default is <code>post</code>, which could be edited at <code>default_layout</code> in <code>_config.yml</code> under <code>&lt;root-dir&gt;</code>. Other layouts available are <code>page</code> and <code>draft</code>. If you don’t want your posts processed, you can set <code>layout: false</code> in front-matter. Depending on the type of layout, the page will be put into different folder:</p>
<table>
<thead>
<tr class="header">
<th>Layout</th>
<th>Path</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>post</td>
<td><code>source/_posts/</code></td>
</tr>
<tr class="even">
<td>page</td>
<td><code>source/</code></td>
</tr>
<tr class="odd">
<td>draft</td>
<td><code>source/_drafts/</code></td>
</tr>
</tbody>
</table>
<h2 id="drafts">Drafts</h2>
<h3 id="create-draft">Create Draft</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>
<h3 id="publish-draft">Publish Draft</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure>
<h2 id="catogories-tags-and-about-page">Catogories, Tags, and About Page</h2>
<h3 id="create">Create</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="cattagabout.png" /></p>
<h3 id="configurate-4">Configurate</h3>
<p>And add the attribute <code>type</code> to each page in front matter.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="front-matter">Front matter</h2>
<p><strong>Front matter</strong> is a block enclosed by <code>---</code> at the beginning of the file that is used to configurate the articles. Besides <code>types</code>, <code>mathjax</code>, <code>comments</code> that mentioned above, <code>tags</code> and <code>categories</code> are also widely used attributes. For details, please visit https://hexo.io/docs/front-matter for your information.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> Tools</span><br><span class="line"><span class="bullet">  -</span> CS</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br></pre></td></tr></table></figure>
<h2 id="add-images">Add Images</h2>
<p>Personally, I prefer the <code>one mark-down file one media folder</code> structure, so in the <code>&lt;root-dir&gt;/_config.yml</code> I turned the flag <code>post_asset_folder</code> on.</p>
<h3 id="configurate-5">Configurate</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>So once a new markdown file is created, a folder with same name would be created, too. Then we could put relevant images inside it.</p>
<h3 id="usage-3">Usage</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alternative-name-if-failed-to-load</span>](<span class="link">image-name.suffix</span>)</span><br></pre></td></tr></table></figure>
<h2 id="qoute-block">Qoute Block</h2>
<h3 id="center-block-qoute">Center Block Qoute</h3>
<p>There are two styles available. <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span> Hey Jude, Don&#x27;t Be Afraid <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote class="blockquote-center">
Hey Jude, Don't Be Afraid
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;Hey Jude, Don<span class="string">&#x27;t Be Afraid&#123;% endcenterquote %&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Hey Jude, Don't Be Afraid</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<h3 id="note-block">Note Block</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% note &lt;type&gt; %&#125; Content &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>Here <code>type</code> could be</p>
<div class="note default">
            <p><strong>default</strong></p>
          </div>
<div class="note primary">
            <p><strong>primary</strong></p>
          </div>
<div class="note success">
            <p><strong>success</strong> Could You See <span class="math inline">\(\sqrt{2}\)</span></p>
          </div>
<div class="note info">
            <p><strong>info</strong> <code>Code</code> Could Also Be Rendered</p>
          </div>
<div class="note warning">
            <p><strong>warning</strong> CAUTION!</p>
          </div>
<div class="note danger">
            <p><strong>danger</strong> KEEP OUT!</p>
          </div>
<h2 id="excerpt">Excerpt</h2>
<p>Just add <code>&lt;!-- more --&gt;</code> after abstract.</p>
<h2 id="tab">Tab</h2>
<div class="tabs" id="name-of-tab-group"><ul class="nav-tabs"><li class="tab"><a href="#name-of-tab-group-1">TAB1</a></li><li class="tab active"><a href="#name-of-tab-group-2">TAB2</a></li><li class="tab"><a href="#name-of-tab-group-3">TAB3</a></li></ul><div class="tab-content"><div class="tab-pane" id="name-of-tab-group-1"><p>Content 1</p></div><div class="tab-pane active" id="name-of-tab-group-2"><p>Content 2</p></div><div class="tab-pane" id="name-of-tab-group-3"><p>Content 3</p></div></div></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% tabs <span class="tag">&lt;<span class="name">Name</span> <span class="attr">of</span> <span class="attr">Tab</span> <span class="attr">Group</span>&gt;</span>, <span class="tag">&lt;<span class="name">Index</span> <span class="attr">of</span> <span class="attr">Default</span> <span class="attr">Tab</span>, <span class="attr">1-based</span> <span class="attr">Index</span>, <span class="attr">-1</span> <span class="attr">for</span> <span class="attr">Hiding</span> <span class="attr">Contents</span>&gt;</span>%&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tab [Name of First Tab, Optional] --&gt;</span></span><br><span class="line">Content 1</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tab [Name of Second Tab, Optional] --&gt;</span></span><br><span class="line">Content 2</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tab [Name of Third Tab, Optional] --&gt;</span></span><br><span class="line">Content 3</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Eigen Tutorial</title>
    <url>/eigen/</url>
    <content><![CDATA[<p>Eigen is a very versatile library in C++ that helps to solve matrix-related problems in efficient approaches. The functions it supports includes but not limited to:</p>
<ul>
<li>Process arbitrary fixed-size or dynamic-size (unknown in compile-time) dense matrices and sparse matrices of all standard numeric types.</li>
<li>Perform matrix decompositions and geometry transforms.</li>
<li>Other extendable modules like non-linear optimization, a polynomial solver, FFT etc.</li>
</ul>
<p>For further details, please visit <a href="http://eigen.tuxfamily.org/dox/" class="uri">http://eigen.tuxfamily.org/dox/</a></p>
<a id="more"></a>
<h1 id="installation">Installation</h1>
<p>Eigen is a <strong>header-only</strong> library. There is only two steps before using it:</p>
<ol type="1">
<li>Download the latest released package</li>
<li>Unzip, and add the path into include directory</li>
</ol>
<div class="note info">
            <p>A library is called <strong>header-only</strong> if the full definitions of all macros, functions and classes comprising the library are visible to the compiler in a header file form.</p>
          </div>
<h1 id="modules-and-headers">Modules and Headers</h1>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Module</th>
<th style="text-align: left;">Header File</th>
<th style="text-align: left;">Contents</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Core</td>
<td style="text-align: left;"><code>&lt;Eigen/Core&gt;</code></td>
<td style="text-align: left;">Definition of Matrix and Array classes; basic linear algebra operations, and array manipulation</td>
</tr>
<tr class="even">
<td style="text-align: left;">Geometry</td>
<td style="text-align: left;"><code>&lt;Eigen/Geometry&gt;</code></td>
<td style="text-align: left;">Geometry-featured transformations</td>
</tr>
<tr class="odd">
<td style="text-align: left;">LU</td>
<td style="text-align: left;"><code>&lt;Eigen/LU&gt;</code></td>
<td style="text-align: left;">Inverse, determinant, LU decompositions</td>
</tr>
<tr class="even">
<td style="text-align: left;">Cholesky</td>
<td style="text-align: left;"><code>&lt;Eigen/Cholesky&gt;</code></td>
<td style="text-align: left;">LLT and LDLT Cholesky factorization</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Householder</td>
<td style="text-align: left;"><code>&lt;Eigen/Householder&gt;</code></td>
<td style="text-align: left;">Householder transformations</td>
</tr>
<tr class="even">
<td style="text-align: left;">SVD</td>
<td style="text-align: left;"><code>&lt;Eigen/SVD&gt;</code></td>
<td style="text-align: left;">SVD decompositions with least-squares solver</td>
</tr>
<tr class="odd">
<td style="text-align: left;">QR</td>
<td style="text-align: left;"><code>&lt;Eigen/QR&gt;</code></td>
<td style="text-align: left;">QR decomposition</td>
</tr>
<tr class="even">
<td style="text-align: left;">Eigenvalues</td>
<td style="text-align: left;"><Eigen/Eigenvalues></td>
<td style="text-align: left;">Eigenvalue, eigenvector decompositions</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Sparse</td>
<td style="text-align: left;"><code>&lt;Eigen/Sparse&gt;</code></td>
<td style="text-align: left;">Sparse matrix storage and its basic linear algebra</td>
</tr>
</tbody>
</table>
<div class="note info">
            <p>A Householder transformation (also called <strong>Householder reflection</strong> or <strong>elementary reflector</strong>) is a <strong>linear transformation</strong> that describes a reflection about a plane or hyperplane containing the origin</p>
          </div>
<p>There are two all-in-one headers that commonly used by developers for convenience. Depending on the context, one may choose:</p>
<ul>
<li><code>&lt;Eigen/Dense&gt;</code>: <code>Core</code>, <code>Geometry</code>, <code>LU</code>, <code>Cholesky</code>, <code>SVD</code>, <code>QR</code>, and <code>Eigenvalues</code></li>
<li><code>&lt;Eigen/Eigen&gt;</code>: <code>Dense</code> and <code>Sparse</code> (the whole library)</li>
</ul>
<h1 id="matrix-class">Matrix Class</h1>
<h2 id="dense-and-sparse-matrix">Dense and Sparse Matrix</h2>
<p><strong>Dense matrix</strong> is the commonly used in most cases, which stores whole matrix in memory.</p>
<p>Under some contexts, for example finite, element analysis, where developers are expected to deal with very large matrices but only a few non-zero coefficients, one may store the non-zero coefficients only, in order to reduce memory consumption and improve performance. Such matrix is called a <strong>Sparse matrix</strong>.</p>
<p>Here we mainly focus on the construction and usage of dense matrix. For details of sparse matrix, please visit <a href="https://eigen.tuxfamily.org/dox/group__TutorialSparse.html" class="uri">https://eigen.tuxfamily.org/dox/group__TutorialSparse.html</a>.</p>
<h2 id="matrix-and-array">Matrix and Array</h2>
<p>The APIs of <code>Array</code> class provide <strong>coefficient-wise</strong> operations, while the APIs of the <code>Matrix</code> class provide <strong>linear algebra</strong> operations.</p>
<h2 id="template-parameters">Template parameters</h2>
<p>The templates of <code>Matrix</code> and <code>Array</code> are shown below. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix&lt;<span class="keyword">typename</span> Scalar,</span><br><span class="line">       <span class="keyword">int</span> RowsAtCompileTime,</span><br><span class="line">       <span class="keyword">int</span> ColsAtCompileTime,</span><br><span class="line">       <span class="keyword">int</span> Options = <span class="number">0</span>,</span><br><span class="line">       <span class="keyword">int</span> MaxRowsAtCompileTime = RowsAtCompileTime,</span><br><span class="line">       <span class="keyword">int</span> MaxColsAtCompileTime = ColsAtCompileTime&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The parameters of Array is as same as above.</span></span><br><span class="line">Array&lt;<span class="keyword">typename</span> _Scalar, <span class="keyword">int</span> _Rows, <span class="keyword">int</span> _Cols, <span class="keyword">int</span> _Options, <span class="keyword">int</span> _MaxRows, <span class="keyword">int</span> _MaxCols&gt; </span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>Scalar</code> is the scalar type. Eigen currently supports all standard floating-point types (<code>float</code>, <code>double</code>, <code>complex&lt;float&gt;</code>, <code>complex&lt;double&gt;</code>, <code>long double</code>), as well as all native integer types (<code>int</code>, <code>unsigned int</code>, <code>short, etc</code>.), and <code>bool</code>.</li>
<li><code>RowsAtCompileTime</code> and <code>ColsAtCompileTime</code> are the number of rows and columns at compile time. When developer cannot tell to the compiler the exact dimensions of the matrix, he could fill with the special value <code>Dynamic</code>, and indicates the size in constructor.</li>
<li><code>Options</code> is a bit field to indicate the storage order; By default, it is <code>ColMajor</code>.</li>
<li><code>MaxRowsAtCompileTime</code> and <code>MaxColsAtCompileTime</code> may be useful if a small dynamic-size matrix is required. After specifing these two params, compiler will allocate a memory on stack according to the upper bound, then avoid dynamic memory allocation.</li>
</ul>
<h2 id="storage-order">Storage Order</h2>
<ul>
<li><code>RowMajor</code> and <code>ColMajor</code> matrices can be mixed in expressions.</li>
<li>Other libraries may require a certain storage order. In such cases, user could construct the objects with the expcted order in the whole program.</li>
<li>Algorithms traversing a matrix <code>row by row</code> will go faster in a row-major matrix because of better data locality; Column-by-column traversal, similarly.</li>
<li>The default in Eigen is <code>ColMajor</code>. Naturally, <code>Eigen</code> work best with column-major matrices.</li>
</ul>
<h2 id="fixed-size-and-dynamic-size">Fixed-size and Dynamic-size</h2>
<ol type="1">
<li>A fixed-size matrix is just a plain array, which is treated as a local variable and allocated on the <code>stack</code>; So a large fixed-size matrix may cause a stack overflow. For matrices with small sizes (typically smaller than <span class="math inline">\(4 \times 4\)</span>, up to <span class="math inline">\(16 \times 16\)</span>), fixed-size usually performs better, as there's no run-time cost, and it is easy to be optimized with loop unwinding.</li>
<li>Dynamic-size matrices are allocated on heap; Their number of rows and columns are stored as member variables. Eigen will be more aggressive trying to vectorize (use SIMD instructions) when operating dynamic-size matrices.</li>
<li>Fixed-size matrices allow compiler to do more rigorous checking towards the validity of the operation, at the costs of longer compilation time and larger executable.</li>
</ol>
<div class="note info">
            <p><strong>Loop unrolling</strong>, also known as loop unwinding, is a loop transformation technique that attempts to optimize a program's execution speed at the expense of its binary size, which is an approach known as space–time tradeoff.</p><p>For example, suppose a normal loop:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x; </span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++)</span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">delete</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>After loop unrolling:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x; </span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x += <span class="number">5</span> )</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">delete</span>(x);</span><br><span class="line">     <span class="keyword">delete</span>(x + <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">delete</span>(x + <span class="number">2</span>);</span><br><span class="line">     <span class="keyword">delete</span>(x + <span class="number">3</span>);</span><br><span class="line">     <span class="keyword">delete</span>(x + <span class="number">4</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
          </div>
<h2 id="convenience-typedefs">Convenience typedefs</h2>
<p>Eigen defines the following <code>Matrix</code> typedefs:</p>
<ul>
<li><code>MatrixNt</code> for <code>Matrix&lt;t, N, N&gt;</code>.</li>
<li><code>VectorNt</code> for <code>Matrix&lt;t, N, 1&gt;</code>.</li>
<li><code>RowVectorNt</code> for <code>Matrix&lt;t, 1, N&gt;</code>.</li>
</ul>
<p>Where <code>N</code> can be any one of <code>2</code>, <code>3</code>, <code>4</code>, or <code>X</code> (for Dynamic); <code>t</code> can be any one of <code>i</code> (int), <code>f</code> (float), <code>d</code> (double), <code>cf</code> (complex<float>), or <code>cd</code> (complex<double>).</p>
<p>For example:</p>
<ul>
<li><code>MatrixXd</code> means <code>typedef Matrix&lt;double, Dynamic, Dynamic&gt; MatrixXd;</code></li>
<li><code>Vector3f</code> means <code>typedef Matrix&lt;float, 3, 1&gt; Vector3f;</code></li>
</ul>
<p>Some commonly used predefined type of <code>Array</code> includes</p>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Typedef</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Array&lt;float,Dynamic,1&gt;</code></td>
<td><code>ArrayXf</code></td>
</tr>
<tr class="even">
<td><code>Array&lt;float,3,1&gt;</code></td>
<td><code>Array3f</code></td>
</tr>
<tr class="odd">
<td><code>Array&lt;double,Dynamic,Dynamic&gt;</code></td>
<td><code>ArrayXXd</code></td>
</tr>
<tr class="even">
<td><code>Array&lt;double,3,3&gt;</code></td>
<td><code>Array33d</code></td>
</tr>
<tr class="odd">
<td><code>Array&lt;int,1,Dynamic&gt;</code></td>
<td><code>RowArrayXi</code></td>
</tr>
</tbody>
</table>
<h2 id="constructor">Constructor</h2>
<h3 id="default-constructor">Default constructor</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix3f a;</span><br><span class="line">MatrixXf b;</span><br></pre></td></tr></table></figure>
<p>Fixed-size matrix <code>a</code> is a 3-by-3 matrix, with a plain <code>float[9]</code> array of uninitialized coefficients; Dynamic-size matrix <code>b</code> is a <strong>null matrix</strong> with no memory allocated.</p>
<h3 id="constructor-with-sizes">Constructor with sizes</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MatrixXf <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">15</span>)</span></span>;</span><br><span class="line"><span class="function">VectorXf <span class="title">b</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>For matrices, pass the number of rows first then number of columns; For vectors, pass the length only. They will allocate the memory with the given size and leave the coefficients uninitialized.</p>
<div class="note primary">
            <p>In order to offer a uniform API across fixed-size and dynamic-size matrices, it is allowed to pass the sizes to the constructor for fixed-size matrix.</p><p><code>Matrix3f a(3,3);</code> is a legal no-operation.</p>
          </div>
<h3 id="constructor-with-coefficients">Constructor with coefficients</h3>
<p><code>Vector2d</code>, <code>Vector3d</code>, and <code>Vector4d</code>, it is allowed to pass the coefficients directly.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector2d <span class="title">a</span><span class="params">(<span class="number">5.0</span>, <span class="number">6.0</span>)</span></span>;</span><br><span class="line"><span class="function">Vector3d <span class="title">b</span><span class="params">(<span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>)</span></span>;</span><br><span class="line"><span class="function">Vector4d <span class="title">c</span><span class="params">(<span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="initializer">Initializer</h2>
<h3 id="comma-initializer">Comma initializer</h3>
<p>Eigen offers a comma initializer which allows users to pass values using <code>&lt;&lt;</code>; Values are seperated by <code>,</code>. The size of the matrix needs to be defined beforehand; Otherwise, compiler will complain if the size of matrix mismatchs the number of coefficients.</p>
<h4 id="comma-with-numeric-values">Comma with numeric values</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix3f m;</span><br><span class="line">m &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>;</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[m = \begin{bmatrix} 
1 &amp; 2 &amp; 3 \\
4 &amp; 5 &amp; 6 \\
7 &amp; 8 &amp; 9
\end{bmatrix}\]</span></p>
<h4 id="comma-with-vectors-or-matrices.">Comma with vectors or matrices.</h4>
<p>This will join vectors or matrices together.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">RowVectorXd <span class="title">vec1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">vec1 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"><span class="function">RowVectorXd <span class="title">vec2</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">vec2 &lt;&lt; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>;</span><br><span class="line"><span class="function">RowVectorXd <span class="title">joined</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">joined &lt;&lt; vec1, vec2;</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[joined = \begin{bmatrix} 1 &amp; 2 &amp; 3 &amp; 1 &amp; 4 &amp; 9 &amp; 16 \end{bmatrix}\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MatrixXf <span class="title">matA</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">matA &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"><span class="function">MatrixXf <span class="title">matB</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">matB &lt;&lt; matA, matA/<span class="number">10</span>, matA/<span class="number">10</span>, matA;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; matB &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[matB = 
\begin{bmatrix} 
1 &amp; 2 &amp; 0.1 &amp; 0.2 \\
3 &amp; 4 &amp; 0.3 &amp; 0.4 \\
0.1 &amp; 0.2 &amp; 1 &amp; 2 \\
0.3 &amp; 0.4 &amp; 3 &amp; 4
\end{bmatrix}\]</span></p>
<h4 id="temporary-objects">Temporary Objects</h4>
<p>Comma initializer can be used to construct temporary objects. <code>finished()</code> after initialization is required to indicate the accomplishment of it. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MatrixXf mat = MatrixXf::Random(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">mat = (MatrixXf(<span class="number">2</span>,<span class="number">2</span>) &lt;&lt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>).finished() * mat;</span><br></pre></td></tr></table></figure></p>
<h3 id="pre-defined-matrices-and-arrays">Pre-defined matrices and arrays</h3>
<p>The Matrix and Array classes have static methods like <code>Zero()</code>, <code>Random()</code>, <code>Constant()</code> etc. for initializing special matrices accordingly. Depending on the size at compile time, the syntax of initialization varies. Suppose <code>XX</code> is a data type and <code>xx</code> is an object. <code>Func</code> will return an object and <code>setFunc()</code> will modify the values in place.</p>
<ul>
<li>For <code>fixed-size</code> objects, <code>XX::Func([values])</code>, <code>xx::setFunc([values])</code></li>
<li>For 1D <code>dynamic-size</code> objects, <code>XX::Func(length, [values])</code>, <code>xx::setFunc(length, [values])</code></li>
<li>For 2D <code>dynamic-size</code> objects, <code>XX::Func(rows, cols, [values])</code>, <code>xx::setFunc(rows, cols, [values])</code></li>
</ul>
<p><code>Func</code> could be</p>
<ul>
<li><code>Zero()</code></li>
<li><code>Ones()</code></li>
<li><code>Constant(value)</code></li>
<li><code>Random() \\ within range [-1, 1]</code></li>
<li><code>LinSpaced(size, low, high) \\only available for 1D objects</code></li>
<li><code>Identity() \\only available for 2D objects</code></li>
</ul>
<h3 id="basis-vectors">Basis Vectors</h3>
<p>It return an expression of the i-th unit (basis) vector.</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Fixed-Size Vectors</th>
<th>Dynamic-Size Vectors</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>XX::UnitX()</code> <span class="math inline">\(=&gt;\begin{bmatrix} 1 &amp; \{,0\}^* \end{bmatrix}\)</span> <br><code>XX::UnitY()</code> <span class="math inline">\(=&gt;\begin{bmatrix} 0 &amp; 1 &amp; \{,0\}^* \end{bmatrix}\)</span> <br><code>XX::UnitZ()</code> <span class="math inline">\(=&gt;\begin{bmatrix} 0 &amp; 0 &amp; 1 &amp; \{,0\}^* \end{bmatrix}\)</span></td>
<td><code>XX::Unit(size, i)</code> <br> e.g. <code>VectorXf::Unit(4,1)</code> <span class="math inline">\(=&gt;\begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 0 \end{bmatrix}\)</span></td>
</tr>
</tbody>
</table>
<h2 id="accessor">Accessor</h2>
<p>Those accessors could be used as both <em>lvalues</em> and <em>rvalues</em>. As usual with other expressions, it has no runtime cost before evaluation. More detailed information are demostrated in</p>
<ul>
<li><a href="http://eigen.tuxfamily.org/dox/group__QuickRefPage.html" class="uri">http://eigen.tuxfamily.org/dox/group__QuickRefPage.html</a></li>
<li><a href="http://eigen.tuxfamily.org/dox/group__TutorialBlockOperations.html" class="uri">http://eigen.tuxfamily.org/dox/group__TutorialBlockOperations.html</a></li>
</ul>
<h3 id="coefficient-accessor">Coefficient Accessor</h3>
<p>Both operator <code>()</code> and<code>[]</code> is overloaded for accessing the coefficients; Same as normal array index in C++, it is zero-based. For vectors, both <code>()</code> and <code>[]</code> is valid; For matrices, since <code>m[i, j]</code> will be treated as <code>m[j]</code>, only <code>()</code> is valid.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MatrixXf <span class="title">a</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">a(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">3.0</span>;</span><br><span class="line"><span class="function">VectorXd <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">v(<span class="number">1</span>) = <span class="number">5.0</span>;</span><br><span class="line">v[<span class="number">0</span>] = <span class="number">2.0</span>; </span><br></pre></td></tr></table></figure>
<h3 id="block">Block</h3>
<p>A block is a rectangular part of matrix or array. It could be selected along a corner or a boundary. For each type of selection, only one example is listed for simplicity's sake.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Operation</strong></th>
<th style="text-align: left;">Dynamic-size</th>
<th style="text-align: left;">Fixed-size</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Block of size <code>(p,q)</code> starting at <code>(i,j)</code></td>
<td style="text-align: left;"><code>m.block(i,j,p,q)</code></td>
<td style="text-align: left;"><code>m.block&lt;p,q&gt;(i,j)</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Corner: Top-Left</td>
<td style="text-align: left;"><code>m.topLeftCorner(p,q)</code></td>
<td style="text-align: left;"><code>m.topLeftCorner&lt;p,q&gt;()</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Half: Upper <code>q</code> Rows</td>
<td style="text-align: left;"><code>m.topRows(q)</code></td>
<td style="text-align: left;"><code>m.topRows&lt;q&gt;()</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Half: Left <code>p</code> Columns</td>
<td style="text-align: left;"><code>m.leftCols(p)</code></td>
<td style="text-align: left;"><code>m.leftCols&lt;p&gt;()</code></td>
</tr>
</tbody>
</table>
<h3 id="rows-and-columns">Rows and Columns</h3>
<p>Individual columns or rows could be selected by</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m.col(idx); <span class="comment">// the idx-th column</span></span><br><span class="line">m.row(idx); <span class="comment">// the idx-th row</span></span><br></pre></td></tr></table></figure>
<h3 id="sub-vectors">Sub-vectors</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Operation</strong></th>
<th style="text-align: left;">Dynamic-size</th>
<th style="text-align: left;">Fixed-size</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">First <code>n</code> elements of vector</td>
<td style="text-align: left;"><code>v.head(n)</code></td>
<td style="text-align: left;"><code>v.head&lt;n&gt;()</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Last <code>n</code> elements of vector</td>
<td style="text-align: left;"><code>v.tail(n)</code></td>
<td style="text-align: left;"><code>v.tail&lt;n&gt;()</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>n</code> elements starting at <code>i</code></td>
<td style="text-align: left;"><code>vector.segment(i, n)</code></td>
<td style="text-align: left;"><code>vector.segment&lt;n&gt;(i)</code></td>
</tr>
</tbody>
</table>
<h3 id="diagonals">Diagonals</h3>
<ul>
<li><code>m.diagonal([idx])</code></li>
</ul>
<h2 id="slicing-and-map">Slicing and Map</h2>
<h3 id="map">Map</h3>
<p>It can be used to process non-eigen data without any overhead.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Map&lt; <span class="keyword">typename</span> PlainObjectType, </span><br><span class="line">     <span class="keyword">int</span> MapOptions, </span><br><span class="line">     <span class="keyword">typename</span> StrideType &gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PlainObjectType</code>: the type after mapping</li>
<li><code>MapOptions</code>: specifies the pointer alignment in bytes. It can be: <code>Aligned128</code>, <code>Aligned64</code>, <code>Aligned32</code>, <code>Aligned16</code>, <code>Aligned8</code> or <code>Unaligned</code>. By default is Unaligned.</li>
<li><code>StrideType</code>: optional. By default, Map assumes the memory layout of an ordinary, contiguous array. This can be overridden by specifying strides. The type passed here must be a specialization of the Stride template.</li>
</ul>
<h3 id="stride">Stride</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Stride&lt; <span class="keyword">int</span> _OuterStrideAtCompileTime, </span><br><span class="line">        <span class="keyword">int</span> _InnerStrideAtCompileTime&gt;</span><br><span class="line">InnerStride&lt;_InnerStrideAtCompileTime = Dynamic&gt;</span><br><span class="line">OuterStride&lt;_OuterStrideAtCompileTime = Dynamic&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>InnerStride</code> is the pointer increment between two consecutive entries within a given row of a row-major matrix or within a given column of a column-major matrix.</li>
<li><code>OuterStride</code> is the pointer increment between two consecutive rows of a row-major matrix or between two consecutive columns of a column-major matrix.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">24</span>]; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) <span class="built_in">array</span>[i] = i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Map&lt;MatrixXi, <span class="number">0</span>, Stride&lt;Dynamic,<span class="number">2</span>&gt; &gt;</span><br><span class="line">         (<span class="built_in">array</span>, <span class="number">3</span>, <span class="number">3</span>, Stride&lt;Dynamic,<span class="number">2</span>&gt;(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">     &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>The output will be <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">8</span> <span class="number">16</span></span><br><span class="line"><span class="number">2</span> <span class="number">10</span> <span class="number">18</span></span><br><span class="line"><span class="number">4</span> <span class="number">12</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h3 id="slicing">Slicing</h3>
<ul>
<li>For fixed-size <code>matrix</code>: <code>Map(dataPtr, stride)</code></li>
<li>For dynamic-size <code>vector</code>: <code>Map(dataPtr, size, stride)</code></li>
<li>For dynamic-size <code>matrix</code>: <code>Map(dataPtr, rows, cols, stride)</code></li>
</ul>
<h1 id="operation">Operation</h1>
<h2 id="arithmetic">Arithmetic</h2>
<p>Eigen doesn't provide implicit type promotion; Therefore, the scalar type of left-hand side and right-hand side must match.</p>
<h3 id="addition-and-subtraction">Addition and Subtraction</h3>
<h4 id="array-array-and-matrix-matrix">Array-Array and Matrix-Matrix</h4>
<ul>
<li>binary operator: <code>+</code> as in <code>a + b</code>; <code>-</code> as in <code>a - b</code></li>
<li>unary operator: <code>-</code> as in <code>- a</code></li>
<li>compound operator: <code>+=</code> as in <code>a += b</code>; <code>-=</code> as in <code>a -= b</code></li>
</ul>
<h4 id="array-scalar">Array-Scalar</h4>
<p>The operators are same as above. <div class="note info">
            <p>A 'matrix-scalar' addition and subtraction is not supported; You are expected to explicitly convert the data type into <code>array</code> first.</p>
          </div></p>
<h3 id="multiplication-and-division">Multiplication and Division</h3>
<h4 id="matrix-scalar-and-array-scalar-multiplication-and-division">Matrix-Scalar and Array-Scalar Multiplication and Division</h4>
<ul>
<li>binary operator: <code>*</code> as in <code>matrix * scalar</code> or <code>scalar * matrix</code>; <code>/</code> as in <code>matrix / scalar</code></li>
<li>compound operator: <code>*=</code> as in <code>matrix *= scalar</code>; <code>/=</code> as in <code>matrix /= scalar</code></li>
</ul>
<h4 id="matrix-matrix">Matrix-Matrix</h4>
<ul>
<li>binary operator: <code>*</code> as in <code>a*b</code></li>
<li>compound operator <code>*=</code> as in <code>a*=b</code> (which is equivalent to <code>a = a*b</code>)</li>
</ul>
<h4 id="coefficient-wise-multiplication-and-division">Coefficient-wise Multiplication and Division</h4>
<ul>
<li><code>Array</code> class naturally provides coefficient-wise product and divition with operator <code>*</code> and <code>/</code>.</li>
<li><code>Matrix</code> have <code>.cwiseProduct(.)</code> only.</li>
</ul>
<h2 id="coefficient-wise-operations">Coefficient-wise Operations</h2>
<h3 id="array-array-and-array-scalar-comparison">Array-Array and Array-Scalar Comparison</h3>
<ul>
<li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li>
<li><code>.min(.)</code>, <code>.max(.)</code></li>
</ul>
<h3 id="matrix-matrix-and-matrix-scalar-comparison">Matrix-Matrix and Matrix-Scalar Comparison</h3>
<ul>
<li><code>.cwiseMin(.)</code>, <code>.cwiseMax(.)</code></li>
<li><code>.cwiseEqual(.)</code>, <code>.cwiseNotEqual(.)</code></li>
</ul>
<div class="note info">
            <p><code>.min(.)</code> and <code>.max(.)</code> construct an array whose coefficients are the minimum/maximum of the given two arrays.</p>
          </div>
<h3 id="other-stl-like-operatons">Other STL-like operatons</h3>
<p>Below could be applied to both <code>Matrix</code> and <code>Array</code></p>
<table style="width:100%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 28%" />
</colgroup>
<thead>
<tr class="header">
<th>Array</th>
<th>Matrix</th>
<th>Array</th>
<th>Matrix</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>a.abs()</code>, <code>abs(a)</code></td>
<td><code>m.cwiseAbs()</code></td>
<td><code>a.abs2()</code>, <code>abs2(a)</code></td>
<td><code>m.cwiseAbs2()</code></td>
</tr>
<tr class="even">
<td><code>a.inverse()</code>, <code>inverse(a)</code></td>
<td><code>m.cwiseInverse()</code></td>
<td><code>a.conjugate()</code>, <code>conj(a)</code></td>
<td><code>m.conjugate()</code></td>
</tr>
<tr class="odd">
<td><code>a.real()</code>, <code>real(a)</code></td>
<td><code>real(m)</code></td>
<td><code>a.imag()</code>, <code>imag(a)</code></td>
<td><code>imag(m)</code></td>
</tr>
<tr class="even">
<td><code>a.sqrt()</code>, <code>sqrt(a)</code></td>
<td><code>m.cwiseSqrt()</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Below are <code>Array</code> only</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Array</th>
<th>Array</th>
<th>Array</th>
<th>Array</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>a.exp()</code>, <code>exp(a)</code></td>
<td><code>a.log()</code>, <code>log(a)</code></td>
<td><code>a.log1p()</code>, <code>log1p(a)</code></td>
<td><code>a.log10()</code>, <code>log10(a)</code></td>
</tr>
<tr class="even">
<td><code>a.pow(e)</code>, <code>pow(a,e)</code></td>
<td><code>a.rsqrt()</code>, <code>rsqrt(a)</code></td>
<td><code>a.square()</code>, <code>square(a)</code></td>
<td><code>a.cube()</code>, <code>cube(a)</code></td>
</tr>
<tr class="odd">
<td><code>a.sin()</code>, <code>sin(a)</code></td>
<td><code>a.cos()</code>, <code>cos(a)</code></td>
<td><code>a.tan()</code>, <code>tan(a)</code></td>
<td><code>a.asin()</code>, <code>asin(a)</code></td>
</tr>
<tr class="even">
<td><code>a.acos()</code>, <code>acos(a)</code></td>
<td><code>a.atan()</code>, <code>atan(a)</code></td>
<td><code>a.sinh()</code>, <code>sinh(a)</code></td>
<td><code>a.cosh()</code>, <code>cosh(a)</code></td>
</tr>
<tr class="odd">
<td><code>a.tanh()</code>, <code>tanh(a)</code></td>
<td><code>a.ceil()</code>, <code>ceil(a)</code></td>
<td><code>a.floor()</code>, <code>floor(a)</code></td>
<td><code>a.round()</code>, <code>round(a)</code></td>
</tr>
<tr class="even">
<td><code>a.isFinite()</code>, <code>isfinite(a)</code></td>
<td><code>a.isInf()</code>, <code>isinf(a)</code></td>
<td><code>a.isNaN()</code>, <code>isnan(a)</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="linear-algebra">Linear Algebra</h2>
<h3 id="dot-and-cross-product">Dot and Cross Product</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector3f m, n;</span><br><span class="line">m.dot(n); <span class="comment">// dot product of m and n</span></span><br><span class="line">m.cross(n); <span class="comment">//cross product of m and n</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>Cross product is only for vectors of size <strong>3</strong>.</p>
          </div>
<h3 id="transpose-conjugate-and-adjoint">Transpose, Conjugate, and Adjoint</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th>Normal</th>
<th>Modifying In-place</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Transpose $ a^T $</td>
<td><code>.transpose()</code></td>
<td><code>.transposeInPlace()</code></td>
</tr>
<tr class="even">
<td>Conjugate $ {a} $</td>
<td><code>.conjugate()</code></td>
<td><code>.conjugateInPlace()</code></td>
</tr>
<tr class="odd">
<td>Adjoint $ a^* $</td>
<td><code>.adjoint()</code></td>
<td><code>.adjointInPlace()</code></td>
</tr>
<tr class="even">
<td>Reverse $ a^{-1} $</td>
<td><code>.reverse()</code></td>
<td><code>.reverseInPlace()</code></td>
</tr>
</tbody>
</table>
<h3 id="norm-and-trace">Norm and Trace</h3>
<ul>
<li><code>.squaredNorm()</code> and <code>.norm()</code>
<ul>
<li>For vectors, <span class="math inline">\(\ell^{2}\)</span> norm.</li>
<li>For matrices, &quot;<strong>Frobenius</strong>&quot; or &quot;<strong>Hilbert-Schmidt</strong>&quot; norm.</li>
</ul></li>
<li><code>.lpNorm&lt;p&gt;()</code>
<ul>
<li><code>p</code> could be integers or <code>Infinity</code> for computing <span class="math inline">\(l^{\infty}\)</span> norm.</li>
</ul></li>
<li><code>.trace()</code></li>
</ul>
<h3 id="decompositions-and-problem-solving">Decompositions and Problem Solving</h3>
<p>Please visit <a href="http://eigen.tuxfamily.org/dox/group__DenseLinearSolvers__chapter.html" class="uri">http://eigen.tuxfamily.org/dox/group__DenseLinearSolvers__chapter.html</a></p>
<h2 id="reduction">Reduction</h2>
<div class="note info">
            <p>Reduction operations are operations that reduce a matrix or vector into a single value.</p>
          </div>
<p>Given an array or matrix, below will return single values.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix3f m;</span><br><span class="line">m.sum(); <span class="comment">// sum of coefficients</span></span><br><span class="line">m.mean(); <span class="comment">// mean of coefficients</span></span><br><span class="line">m.prod(); <span class="comment">// product of coefficients</span></span><br><span class="line">m.maxCoeff(); <span class="comment">// max coefficient</span></span><br><span class="line">m.minCoeff(); <span class="comment">// min coefficient</span></span><br></pre></td></tr></table></figure>
<p>Furthermore, for <code>minCoeff</code> and <code>maxCoeff</code>, the index of the value is also accessible by passing the address. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix3f m = Matrix3f::Random();</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">ptrdiff_t</span> i, j;</span><br><span class="line"><span class="keyword">float</span> minOfM = m.minCoeff(&amp;i,&amp;j);</span><br></pre></td></tr></table></figure></p>
<h3 id="boolean-reductions">Boolean Reductions</h3>
<ul>
<li><code>.all()</code> returns <code>true</code> if all of the coefficients are evaluated to <code>true</code> .</li>
<li><code>.any()</code> returns <code>true</code> if at least one of the coefficients are evaluated to <code>true</code>.</li>
<li><code>.count()</code> returns the number of coefficients are evaluated to <code>true</code>.</li>
</ul>
<h2 id="broadcasting-and-partial-reduction">Broadcasting and Partial Reduction</h2>
<h3 id="partial-reduction">Partial Reduction</h3>
<p>Partial reductions apply the reduction operations on each column or row, and return a column or row vector with the corresponding values.</p>
<p>For example,</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Eigen::MatrixXf <span class="title">mat</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">       <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mat.colwise().maxCoeff() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//output will be [3 2 7 9]</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mat.rowwise().maxCoeff() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// output will be [9 // 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="broadcasting">Broadcasting</h3>
<p>Broadcasting could be applied to <code>Matrix-Vector</code> and <code>Array-ArrayXN</code> (equivalent for vector under <code>Array</code> context) expression that interprets the <code>Vector</code> as a matrix via replicating.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">       <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">v &lt;&lt; <span class="number">0</span>,</span><br><span class="line">     <span class="number">1</span>;</span><br><span class="line">mat.colwise() += v;</span><br></pre></td></tr></table></figure>
<p>This expression means</p>
<p><span class="math display">\[\begin{bmatrix} 1 &amp; 2 &amp; 6 &amp; 9 \\ 3 &amp; 1 &amp; 7 &amp; 2 \end{bmatrix} + \begin{bmatrix} 0 &amp; 0 &amp; 0 &amp; 0 \\ 1 &amp; 1 &amp; 1 &amp; 1 \end{bmatrix} = \begin{bmatrix} 1 &amp; 2 &amp; 6 &amp; 9 \\ 4 &amp; 2 &amp; 8 &amp; 3\end{bmatrix}\]</span></p>
<div class="note warning">
            <p>The vector operand must be of type <code>Vector</code> or <code>ArrayXN</code>; Otherwise, a compile-time error will be raised.</p>
          </div>
<h2 id="replication">Replication</h2>
<p><code>Replicate&lt; MatrixType, RowFactor, ColFactor &gt;</code> describes the multiple replication of a matrix or vector.</p>
<ul>
<li><code>MatrixType</code>, the type of the object we are replicating</li>
<li><code>RowFactor</code>, number of repetitions at compile time along the vertical direction, can be <code>Dynamic</code>.</li>
<li><code>ColFactor</code>, number of repetitions at compile time along the horizontal direction, can be <code>Dynamic</code>.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MatrixXi <span class="title">m</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">m &lt;&lt; <span class="number">7</span>, <span class="number">6</span>,  <span class="number">9</span>,</span><br><span class="line">    <span class="number">-2</span>, <span class="number">6</span>, <span class="number">-6</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m.replicate&lt;<span class="number">3</span>,<span class="number">2</span>&gt;() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p><code>m.replicate&lt;3,2&gt;()</code> or <code>m.replicate(3, 2)</code> will be</p>
<p><span class="math display">\[\begin{bmatrix} 7 &amp; 6 &amp; 9 &amp; 7 &amp; 6 &amp; 9 \\ -2 &amp; 6 &amp; -6 &amp; -2 &amp; 6 &amp; -6 \\ 7 &amp; 6 &amp; 9 &amp; 7 &amp; 6 &amp; 9 \\ -2 &amp; 6 &amp; -6 &amp; -2 &amp; 6 &amp; -6 \\ 7 &amp; 6 &amp; 9 &amp; 7 &amp; 6 &amp; 9 \\ -2 &amp; 6 &amp; -6 &amp; -2 &amp; 6 &amp; -6 \end{bmatrix}\]</span></p>
<p>This can also combine with <code>broadcasting</code>. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector3i <span class="title">v</span><span class="params">(<span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v.rowwise().replicate(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p>
<p>The output will be <span class="math display">\[\begin{bmatrix} 7 &amp; 7 &amp; 7 &amp; 7 &amp; 7 \\ -2 &amp; -2 &amp; -2 &amp; -2 &amp; -2 \\ 6 &amp; 6 &amp; 6 &amp; 6 &amp; 6 \end{bmatrix}\]</span></p>
<h2 id="array-matrix-conversion">Array-Matrix Conversion</h2>
<p>Mixing matrices and arrays in an expression is forbidden with Eigen; Therefore, eigen provides explict type conversion approaches <code>.matrix()</code> and <code>.array()</code>; Both <code>.matrix()</code> and <code>.array()</code> can be used as <em>rvalues</em> or <em>lvalues</em>.</p>
<div class="note info">
            <p>An exception is that it is valid to assign a matrix expression to an array variable, or to assign an array expression to a matrix variable.</p>
          </div>
<h2 id="resize">Resize</h2>
<div class="note warning">
            <p>Trying to resize a fixed-size matrix will trigger an assertion failure.</p>
          </div>
<h3 id="get-the-shape-info">Get the Shape info</h3>
<p>The shape of a matrix can be retrieved via <code>rows()</code>, <code>cols()</code> and <code>size()</code>. These methods return the number of rows, the number of columns and the number of coefficients, respectively.</p>
<h3 id="reshape-by-api">Reshape by API</h3>
<p><code>resize(nRows, nCols)</code> could change the shape of a dynamic matrix. If the size become consistent, <code>resize</code> is a no-operation; Otherwise, the values of the coefficients may change. If you want to keep the values invariant, use <code>conservativeResize()</code> instead.</p>
<h3 id="reshape-by-assignment">Reshape by assignment</h3>
<p><strong>Assignment</strong> is the action of copying a matrix into another, using operator <code>=</code>. If the left-hand size is a dynamic matrix, Eigen may resize it implicitly in order to match the size of the matrix on the right-hand side.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MatrixXf <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">MatrixXf <span class="title">b</span><span class="params">(<span class="number">3</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">a = b; <span class="comment">//it is valid and then a become a 3 x 3 matrix</span></span><br></pre></td></tr></table></figure>
<h1 id="expression-object-and-aliasing">Expression Object and Aliasing</h1>
<h2 id="expression-object">Expression Object</h2>
<p>In Eigen, arithmetic operators such as operator <code>+</code> don't perform computation by themselves, they just return an &quot;expression object&quot; describing the computation to be performed. The actual computation happens later, when the whole expression is required to be evaluated, typically in operator <code>=</code>. Then optimizing compiler will output a perfectly optimized code. Thus, you should not be afraid of using relatively large arithmetic expressions with Eigen.</p>
<p>For example,</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">VectorXf a(50), b(50), c(50), d(50);</span><br><span class="line">a = <span class="number">3</span>*b + <span class="number">4</span>*c + <span class="number">5</span>*d;</span><br></pre></td></tr></table></figure>
<p>Eigen will do one loop only, which will look like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i)</span><br><span class="line">  a[i] = <span class="number">3</span>*b[i] + <span class="number">4</span>*c[i] + <span class="number">5</span>*d[i];</span><br></pre></td></tr></table></figure>
<h2 id="alias">Alias</h2>
<p>In Eigen, aliasing refers to assignment statements that the same matrix/array/vector appears on both left and right size of the assignment operator <code>=</code>. <code>.eval()</code> may be required to avoid aliasing by evaluating the right-hand side fully into a temporary matrix/array/vector and then assign it to the left-hand side.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Matrix2i a; a &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line">a = a.transpose(); <span class="comment">// !!! do NOT do this !!!</span></span><br></pre></td></tr></table></figure>
<p>Then <code>a</code> will become</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>Aliasing cannot be detected at compile time. Most operations in Eigen assume that there are no aliasing problem, except for <code>Squared Matrix multiplication</code>; By default, if matA is a squared matrix, <code>matA * matA</code> will be interpreted as</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tmp = matA*matA;</span><br><span class="line">matA = tmp;</span><br></pre></td></tr></table></figure>
<p>If you're sure that matrix product can be safely evaluated into the destination matrix without aliasing issue, then you can use the <code>.noalias()</code> function to avoid the temporary, like <code>matB.noalias() = matA * matA</code>. This allows Eigen to evaluate the matrix product <code>matA * matA</code> directly into <code>matB</code>.</p>
<h1 id="geometric-module">Geometric Module</h1>
<p><code>Geometry</code> module provides two different kinds of geometric transformations:</p>
<ul>
<li>Abstract transformations, which are not represented as matrices, such as <code>rotation</code>, <code>translation</code>, <code>scaling</code>. But it's valid to operate with matrix/vectors or convert them into matrices.</li>
<li><code>Transform</code>, Projective or affine transformation matrices</li>
<li>It's allowed to construct <code>Transform</code> from abstract transformations, for example, <code>Transform t (AngleAxis(angle,axis))</code></li>
</ul>
<h2 id="accessor-1">Accessor</h2>
<ul>
<li>Transform matrix <code>t.matrix()</code> =&gt; <span class="math inline">\((N + 1) \times (N + 1)\)</span> matrix</li>
<li>Coefficients <code>t(i,j)</code>, <code>t.matrix()(i,j)</code> =&gt; scalar type</li>
<li>Translation part <code>t.translation()</code> =&gt; <span class="math inline">\(N \times 1\)</span> vector</li>
<li>Linear part <code>t.linear()</code> =&gt; <span class="math inline">\(N \times N\)</span> matrix</li>
<li>Rotation <code>t.rotation()</code> =&gt; <span class="math inline">\(N \times N\)</span> matrix</li>
</ul>
<h2 id="compatibility-with-opengl">Compatibility with OpenGL</h2>
<ul>
<li>For manipulating OpenGL <code>4x4</code> matrices then <code>Affine3X</code> are what you want.</li>
<li>Transform::data() method could pass the transformation matrix to OpenGL.</li>
</ul>
<h2 id="conversion">Conversion</h2>
<p>Any transformations can be converted to any other types of the same nature, or to a more generic type. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AngleAxisf aa;  aa = Quaternionf(..);</span><br><span class="line">AngleAxisf aa;  aa = Matrix3f(..);</span><br><span class="line">Affine3f m;     m  = Translation3f(..);     </span><br></pre></td></tr></table></figure>
<h2 id="operations">Operations</h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td>2D rotation with <code>angle</code></td>
<td><code>Rotation2D&lt;float&gt; rot2(angle)</code></td>
</tr>
<tr class="even">
<td>3D rotation with <code>angle</code> and normalized <code>axis</code></td>
<td><code>AngleAxis&lt;float&gt; aa(angle, axis)</code></td>
</tr>
<tr class="odd">
<td>3D rotation with <code>quaternion</code></td>
<td><code>Quaternion&lt;float&gt; q;</code> <br> <code>q = AngleAxis&lt;float&gt;(angle, axis)</code></td>
</tr>
<tr class="even">
<td>Scaling</td>
<td><code>Scaling(sx, sy)</code> <br> <code>Scaling(sx, sy, sz)</code> <br> <code>Scaling(s)</code> <br> <code>Scaling(vecN)</code></td>
</tr>
<tr class="odd">
<td>Translation</td>
<td><code>Translation&lt;float,2&gt;(tx, ty)</code> <br> <code>Translation&lt;float,3&gt;(tx, ty, tz)</code> <br> <code>Translation&lt;float,N&gt;(s)</code> <br> <code>Translation&lt;float,N&gt;(vecN)</code></td>
</tr>
<tr class="even">
<td>Affine transformation</td>
<td><code>Transform&lt;float,N,Affine&gt; t = composition_of_others</code></td>
</tr>
<tr class="odd">
<td>Slerp</td>
<td><code>rot1.slerp(alpha,rot2)</code></td>
</tr>
<tr class="even">
<td>Normalize</td>
<td><code>vector.normalized()</code></td>
</tr>
<tr class="odd">
<td>Hnormalize</td>
<td><code>hnormalized()</code>, divided by the last coefficient first then normalize it</td>
</tr>
<tr class="even">
<td>Homogeneous</td>
<td><code>v.homogeneous()</code>, add <code>1</code> at the end</td>
</tr>
</tbody>
</table>
<div class="note info">
            <p>To transform a set of vectors, use <code>rotation matrix</code>; Otherwise, usa <code>Quaternion</code> as it is compact, fast and stable.</p>
          </div>
<p>For further details please visit <a href="http://eigen.tuxfamily.org/dox/group__Geometry__Module.html" class="uri">http://eigen.tuxfamily.org/dox/group__Geometry__Module.html</a></p>
<h2 id="composition">Composition</h2>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Before</th>
<th>After</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Translation</td>
<td><code>t.translate(vector)</code></td>
<td><code>t.pretranslate(vector)</code></td>
</tr>
<tr class="even">
<td>Rotation</td>
<td><code>t.rotate(rotation)</code></td>
<td><code>t.prerotate(rotation)</code></td>
</tr>
<tr class="odd">
<td>Scaling</td>
<td><code>t.scale(vector)</code>, <code>t.scale(s)</code></td>
<td><code>t.prescale(vector)</code>, <code>t.prescale(s)</code></td>
</tr>
<tr class="even">
<td>2D Shear</td>
<td><code>t.shear(sx,sy)</code></td>
<td><code>t.preshear(sx,sy)</code></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Eigen</category>
      </categories>
      <tags>
        <tag>Linear Algebra</tag>
        <tag>Eigen</tag>
        <tag>Computer Graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>Syntax of CMake</title>
    <url>/cmake-syntax/</url>
    <content><![CDATA[<p>This article is the supplementary material of <a href="cmake/">Build using CMake</a>.</p>
<h1 id="command-invocations">Command Invocations</h1>
<p>A CMake source file is just a sequence of <strong>Command Invocations</strong>. A <code>command invocation</code> is an identifier followed by paren-enclosed arguments. Arguments are seperated by <code>space</code>. For examlpe:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(hello world.c)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="argument">Argument</h1>
<p>There are three types of arguments. Brackets and Qouted Arguments are used for constructing long, usually multi-line arguments, typically, the text of message.</p>
<h2 id="bracket-argument">Bracket Argument</h2>
<p>This syntax is inspired by the <code>long bracket syntax</code> of <code>Lua</code>. The format of open bracket is <code>'[' '='* '['</code> whereas the format of close bracket is <code>']' '='*  ']'</code>. The <code>=</code> could repeat zero or multiple times; The bracket with same number of <code>=</code> will be paired together.</p>
<p>All text between the paired brackets will be treated as exactly one bracket argument. No nest, No Evaluation will be performed. For example:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>([=[</span><br><span class="line">No \-escape sequences <span class="keyword">or</span> <span class="variable">$&#123;variable&#125;</span> references are evaluated.</span><br><span class="line">This is always one argument even though it contains a ; character.</span><br><span class="line">The text does <span class="keyword">not</span> end <span class="keyword">on</span> a closing bracket of length <span class="number">0</span> like ]].</span><br><span class="line">]=])</span><br></pre></td></tr></table></figure>
<h2 id="quoted-argument">Quoted Argument</h2>
<p>A quoted argument is all the text between a pair of double-quote characters. Different from bracket argument, both <code>Escape Sequences</code> and <code>Variable References</code> will be evaluated here. The line continuation character <code>\</code> is optional here. For example:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">This is always one argument even though it contains a ; character. \</span></span><br><span class="line"><span class="string">Both \\-escape sequences and $&#123;variable&#125; references are evaluated.</span></span><br><span class="line"><span class="string">The text does not end on an escaped double-quote like \&quot;.</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="unquoted-argument">Unquoted Argument</h2>
<p>An unquoted argument is not enclosed by any quoting syntax. It may not contain any whitespace, <code>(</code>, <code>)</code>, <code>#</code>, <code>&quot;</code>, or <code>\</code> except when escaped by a backslash. Both Escape Sequences and Variable References are evaluated. An unquoted argument may be treated as zero or a list arguments that splitted by <code>;</code> (not <code>\;</code>), which is same as <code>List</code>. For example:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(arg</span><br><span class="line">    NoSpace</span><br><span class="line">    Escaped\ Space</span><br><span class="line">    This;Divides;Into;Five;Arguments</span><br><span class="line">    Escaped\;Semicolon</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">&quot;$&#123;arg&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>The output will be <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">NoSpace</span><br><span class="line">Escaped Space</span><br><span class="line">This</span><br><span class="line">Divides</span><br><span class="line">Into</span><br><span class="line">Five</span><br><span class="line">Arguments</span><br><span class="line">Escaped;Semicolon</span><br></pre></td></tr></table></figure></p>
<h1 id="lists">Lists</h1>
<p>A list of elements is represented as a string by concatenating the elements separated by <code>;</code>. For example, the <code>set()</code> command stores multiple values into the destination variable as a list:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(srcs a.c b.c c.c) <span class="comment"># sets &quot;srcs&quot; to &quot;a.c;b.c;c.c&quot;</span></span><br></pre></td></tr></table></figure>
<p>Lists are meant for simple use cases such as a list of source files and should not be used for complex data processing tasks. Most commands that construct lists do not escape ; characters in list elements, thus flattening nested lists:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(x a <span class="string">&quot;b;c&quot;</span>) <span class="comment"># sets &quot;x&quot; to &quot;a;b;c&quot;, not &quot;a;b\;c&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="variable">Variable</h1>
<p>Variables are the basic unit of storage in the CMake Language. They are always of string type, though some commands may interpret them as values of other types. Variable are <code>case-sensitive</code>; It's recommended to use alphanumeric characters with <code>_</code> and <code>-</code> only.</p>
<div class="note info">
            <p><strong>Reserved Words</strong></p><ol type="1"><li>Begin with <code>CMAKE_</code> or <code>_CMAKE_</code> (upper-, lower-, or mixed-case)</li><li>Begin with <code>_</code> followed by the name of any CMake Command.</li></ol><p>Please visit <a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html#manual:cmake-commands(7)" class="uri">https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html#manual:cmake-commands(7)</a> for the list of cmake commands.</p>
          </div>
<h2 id="set-and-unset">Set and Unset</h2>
<p>Signatures <code>&lt;value&gt;...</code> expect zero or more arguments. Multiple arguments will be joined as a semicolon-separated list to form the actual variable value to be set. Zero arguments will cause normal variables to be unset.</p>
<h3 id="set-normal-variable">Set Normal Variable</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... [PARENT_SCOPE])</span><br></pre></td></tr></table></figure>
<p>If the <code>PARENT_SCOPE</code> option is given, then the variable will be set in the scope above the current scope.</p>
<h3 id="set-cache-entry">Set Cache Entry</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</span><br></pre></td></tr></table></figure>
<p>Sets the given cache <variable> (cache entry). Since cache entries are meant to provide user-settable values this does not overwrite existing cache entries by default. Use the FORCE option to overwrite existing entries.</p>
<ul>
<li><code>Type</code> should be one of the following:
<ul>
<li><code>BOOL</code>: Boolean <strong>ON/OFF</strong> value. cmake-gui offers a <code>checkbox</code>.</li>
<li><code>FILEPATH</code>: Path to a <strong>file</strong> on disk. cmake-gui offers a <code>file dialog</code>.</li>
<li><code>PATH</code>: Path to a <strong>directory</strong> on disk. cmake-gui offers a <code>file dialog</code>.</li>
<li><code>STRING</code>: A line of text. cmake-gui offers a text field or a drop-down selection if the STRINGS cache entry property has been set.</li>
<li><code>INTERNAL</code> A line of text. cmake-gui does not show internal entries. They may be used to store variables persistently across runs. Use of this type implies <code>FORCE</code>.</li>
</ul></li>
<li><code>&lt;docstring&gt;</code> should be a line of text providing a quick summary of the option for presentation to cmake-gui users.</li>
<li><code>FORCE</code> should be used when it's required to overwrite the value of this entry. Since cache entries are meant to provide user-settable values, this does not overwrite existing cache entries by default.</li>
</ul>
<div class="note info">
            <p>if the <code>Type</code> is <code>PATH</code> or <code>FILEPATH</code> and the <code>value</code> provided is a relative path, the set command will treat the path as relative to the current working directory and convert it to an absolute path.</p>
          </div>
<h3 id="set-environment-variable">Set Environment Variable</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(ENV&#123;&lt;variable&gt;&#125; [&lt;value&gt;])</span><br></pre></td></tr></table></figure>
<p>If more than one arguments passed, extras will be ignored and an author warning is issued.</p>
<h3 id="unset-variables">Unset Variables</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(&lt;variable&gt; [CACHE | PARENT_SCOPE])</span><br><span class="line"><span class="keyword">unset</span>(ENV&#123;&lt;variable&gt;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="scope">Scope</h2>
<p>Variables have dynamic scope. Each variable <code>set</code> or <code>unset</code> creates a binding in the corresponding scope.</p>
<p>Each new directory or function creates a new scope. When evaluating the <code>variable references</code>, CMake first searches the function call stack: if a <code>set</code> binding is found, use it; Else if no binding or <code>unset</code> binding is found, searches the current directory scope, and the cache scope respectively. If there's no binding in all scopes, CMake evaluates it as an empty string.</p>
<h3 id="function-scope">Function Scope</h3>
<p>A variable <code>set</code> or <code>unset</code> binds in <code>function</code> is visible only within the current and nested functions.</p>
<h3 id="directory-scope">Directory Scope</h3>
<p>Each directory in the source tree has its own variable bindings. Before processing the CMakeLists.txt file for the directory, CMake copies all variable bindings defined in the parent directory, and initialize a new directory scope.</p>
<p>A variable <code>set</code> or <code>unset</code> outside the functions binds to the current directory scope.</p>
<h3 id="persistent-cache">Persistent Cache</h3>
<p>CMake stores a separate set of <code>cache</code> variables that persist across multiple runs within a project build tree. Cache entries have an isolated binding scope and coule be modified only by explicit request.</p>
<h2 id="variable-references">Variable References</h2>
<h3 id="normal-variables">Normal Variables</h3>
<p>A variable reference has the form <code>$&#123;&lt;variable&gt;&#125;</code>; When it appears inside a <code>Quoted Argument</code> or an <code>Unquoted Argument</code>, it is evaluated and replaced by the <code>value</code> of the variable, or by an <code>empty string</code> if it is not set. Variable references can <code>nest</code> and are evaluated from the inside out. For example</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(inner_var foo)</span><br><span class="line"><span class="keyword">set</span>(outer_foo_var <span class="number">999</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;nest variable value is :$&#123;outer_$&#123;inner_var&#125;_var&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>The output will be <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">nest variable value is :<span class="number">999</span></span><br></pre></td></tr></table></figure></p>
<div class="note warning">
            <p>The <code>if()</code> command has a special condition syntax that allows for variable references in the short form <code>&lt;variable&gt;</code> instead of <code>${&lt;variable&gt;}</code>. However, environment and cache variables always need to be referenced as <code>$ENV{&lt;variable&gt;}</code> or <code>$CACHE{&lt;variable&gt;}</code>.</p>
          </div>
<h3 id="environment-variable-reference">Environment Variable Reference</h3>
<p>Environment variable references have the form <code>$ENV&#123;&lt;variable&gt;&#125;</code>. Environment variables have global scope in a CMake process and never cached. <code>set()</code> and <code>unset()</code> commands only temporarily affect the running CMake process, without altering the actual system environment, the process called from current process or the environment of subsequent build or test process.</p>
<h3 id="cache-variable-reference">Cache Variable Reference</h3>
<p>A cache variable reference has the form <code>$CACHE&#123;&lt;variable&gt;&#125;</code>.</p>
<h1 id="control-structures">Control Structures</h1>
<h2 id="conditional-blocks">Conditional Blocks</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;condition&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">elseif</span>(&lt;condition&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<h3 id="conditions">Conditions</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Type of Test</th>
<th>Identifier</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Unary</td>
<td><code>EXISTS</code>, <code>IS_DIRECTORY</code>, <code>IS_SYMLINK</code>, <code>IS_ABSOLUTE</code>, <code>COMMAND</code></td>
</tr>
<tr class="even">
<td>Binary</td>
<td><code>EQUAL</code>, <code>LESS</code>, <code>LESS_EQUAL</code>, <code>GREATER</code>, <code>GREATER_EQUAL</code>, <br><code>STREQUAL</code>, <code>STRLESS</code>, <code>STRLESS_EQUAL</code>, <code>STRGREATER</code>, <code>STRGREATER_EQUAL</code>, <br><code>VERSION_EQUAL</code>, <code>VERSION_LESS</code>, <code>VERSION_LESS_EQUAL</code>, <code>VERSION_GREATER</code>, <code>VERSION_GREATER_EQUAL</code>, <br><code>MATCHES</code></td>
</tr>
<tr class="odd">
<td>Boolean</td>
<td><code>NOT</code>, <code>AND</code>, <code>OR</code></td>
</tr>
</tbody>
</table>
<p>Behaviors of path cheking are well-defined only for <strong>full path</strong>.</p>
<p>Other useful tests:</p>
<ul>
<li><code>if(TARGET target-name)</code> to check if the given name is an existing logical target name created by <code>add_executable()</code>, <code>add_library()</code>, or <code>add_custom_target()</code></li>
<li><code>if(TEST test-name)</code> to check if the given name is an existing test name created by the <code>add_test()</code>.</li>
<li><code>if(file1 IS_NEWER_THAN file2)</code> returns <code>True</code> if <code>file1</code> is newer than <code>file2</code> or if one of the two files doesn’t exist.</li>
<li><code>if(&lt;variable|string&gt; IN_LIST &lt;variable&gt;)</code> to check if the given element is contained in the named list variable.</li>
<li><code>if(DEFINED &lt;name&gt;|CACHE&#123;&lt;name&gt;&#125;|ENV&#123;&lt;name&gt;&#125;)</code> to check if the variable is defined.</li>
</ul>
<h3 id="variable-expansion">Variable Expansion</h3>
<p>Normal variable evaluation with <code>$&#123;&#125;</code> applies before the <code>if</code> command even receives the arguments; Therefore, within condition statements that accepting <code>&lt;variable|string&gt;</code>, <code>automatic evaluation</code> is applied. Developers is instead excepted to pass the variable directly without <code>$&#123;&#125;</code> enclosed.</p>
<h2 id="loops">Loops</h2>
<p><code>break()</code>, <code>continue()</code></p>
<h3 id="for-each">For Each</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; &lt;items&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p><code>&lt;items&gt;</code> is a list of items that are separated by <code>;</code> or <code></code>. At the beginning of each iteration, <code>loop_var</code> will be set to the value of the current item.</p>
<h4 id="variants">Variants</h4>
<ol type="1">
<li><p>Iterate from <code>0</code> or <code>start</code> if set to stop (inclusive), with step: <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; RANGE [&lt;start&gt;] &lt;stop&gt; [&lt;step&gt;])</span><br></pre></td></tr></table></figure></p></li>
<li><p>Iterate over a list of items. <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; IN LISTS [&lt;lists&gt;])</span><br></pre></td></tr></table></figure> <code>&lt;lists&gt;</code> is a whitespace or semicolon separated list of list-valued variables. For example, <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(A <span class="number">0</span>;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">set</span>(B <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line"><span class="keyword">set</span>(C <span class="string">&quot;4 5&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(D <span class="number">6</span>;<span class="number">7</span> <span class="number">8</span>)</span><br><span class="line"><span class="keyword">set</span>(E <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">foreach</span>(X IN LISTS A B C D E)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;X&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure> This will print numbers from <code>1</code> to <code>8</code>.</p></li>
<li>Iterate over multiple lists simultaneously <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</span><br></pre></td></tr></table></figure> <code>&lt;lists&gt;</code> is also a whitespace or semicolon separated list of list-valued variables.
<ul>
<li>If only one <code>loop_var</code> given, then access the values via <code>loop_var_N</code> correspondingly;</li>
<li>If multiple variable names passed, the number of variable and the number of lists should match;</li>
<li>If any of the lists are shorter, the corresponding iteration variable become undefined. <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>(APPEND English one two three four)</span><br><span class="line"><span class="keyword">list</span>(APPEND Bahasa satu dua tiga)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(num IN ZIP_LISTS English Bahasa)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;num_0&#125;, $&#123;num_1&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(en ba IN ZIP_LISTS English Bahasa)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;en&#125;, $&#123;ba&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure> Both yield <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">-- one, satu</span><br><span class="line">-- two, dua</span><br><span class="line">-- three, tiga</span><br><span class="line">-- four, </span><br></pre></td></tr></table></figure></li>
</ul></li>
</ol>
<h3 id="while">While</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(&lt;condition&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endwhile</span>()</span><br></pre></td></tr></table></figure>
<h1 id="function-and-macro">Function and Macro</h1>
<p><code>macro</code> is very similar to <code>function</code>. They are defined by</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(&lt;name&gt; [&lt;arg1&gt; ...])</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure>
<p>and</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">macro</span>(&lt;name&gt; [&lt;arg1&gt; ...])</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endmacro</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>The <code>name</code> of functions or marcros are case-insensitive.</li>
<li>They could be invoked via <code>&lt;identifier&gt;([args])</code> or <code>cmake_language(CALL &lt;identifier&gt;)</code></li>
<li>When a function or marcro is invoked, CMake first evaluates (<code>$&#123;arg1&#125;</code>, ...) with the arguments passed, and then invoked them as normal commands.</li>
<li>For each invoking, there are some implicit variables available:
<ul>
<li><code>ARGC</code>: the number of arguments.</li>
<li><code>ARGV</code> holds the list of all arguments passed to the function; Alternatively, the arguments could be accessed via <code>ARGV0</code>, <code>ARGV1</code> ...</li>
</ul></li>
<li>In a function, <code>ARGC</code>, <code>ARGV</code> and <code>ARGV0</code> are true variables; In a macro, they are not, they are string replacements.</li>
<li>A function is executed by transferring control from the calling statement to the function body. A macro is executed as if the macro body were pasted in place of the calling statement. This has the consequence that a <code>return()</code> in a macro body does not just terminate execution of the macro but also the control from the scope of the macro call.</li>
</ul>
<h1 id="comments">Comments</h1>
<h2 id="bracket-comment">Bracket Comment</h2>
<p>Bracket Comments adopt the same syntax as bracket argument, with a <code>#</code> immediately ahead. It's helpful to construct multi-line comment or inline comments that terminated in the middle and followed by other arguments.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[[This is a bracket comment.</span></span><br><span class="line">It runs until the close bracket.]]</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;First Argument\n&quot;</span> <span class="comment">#[[Bracket Comment]] &quot;Second Argument&quot;)</span></span><br></pre></td></tr></table></figure>
<p>The output will be</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">First Argument</span><br><span class="line">Second Argument</span><br></pre></td></tr></table></figure>
<h2 id="line-comment">Line Comment</h2>
<p>Line comments are the content between <code>#</code> and the end of the line.</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>From Vector Space to Euclidean Space</title>
    <url>/space/</url>
    <content><![CDATA[<div class="tabs" id="space"><ul class="nav-tabs"><li class="tab active"><a href="#space-1">Human-Friendly Definition</a></li><li class="tab"><a href="#space-2">A Formal Definition</a></li></ul><div class="tab-content"><div class="tab-pane active" id="space-1"><p>A <strong>space</strong> consists of a set of selected <strong>points</strong>, with a set of selected <strong>relationships</strong> between those points. The points could be elements of a set, functions on another space, or subspaces of another space. The <strong>relationships</strong> define the nature of the space.</p>
<p>According to Kevin Carlson,</p>
<blockquote>
<p>You could think of <strong>&quot;structures&quot;</strong> as places we do <strong>algebra</strong>, and <strong>&quot;spaces&quot;</strong> as places we do <strong>geometry</strong>. Then a lot of great mathematics has come from passing from structures to spaces and vice versa, as when we look at the fundamental group of a topological space or the spectrum of a ring.</p>
</blockquote></div><div class="tab-pane" id="space-2"><p>As mentioned in TAB1, <strong>space</strong> and <strong>structure</strong> share similar definition; I just copy the definition of <strong>structure</strong> here.</p>
<p>A <strong>structure</strong> can be defined as a triple <span class="math inline">\(\mathcal{A} = (A, \sigma, I)\)</span> where <span class="math inline">\(A\)</span> means <strong>domain</strong>, <span class="math inline">\(\sigma\)</span> means signature, and <span class="math inline">\(I\)</span> means interpretation function.</p>
<ol type="1">
<li><p>The <strong>domain</strong> is an arbitrary set. Sometimes the notation <span class="math inline">\(\operatorname{dom}(\mathcal A)\)</span> or <span class="math inline">\(|\mathcal{A}|\)</span> is used for the domain of <span class="math inline">\(\mathcal {A}\)</span>; Whereas sometimes <span class="math inline">\(\mathcal {A}\)</span> refers both to the structure and its domain.</p></li>
<li><p>The <strong>signature</strong> <span class="math inline">\(\sigma =(S,\operatorname {ar} )\)</span> is a set <span class="math inline">\(S\)</span> of <strong>function symbols</strong> (like +, ×, 0, 1) and <strong>relation symbols</strong> (like <span class="math inline">\(\ge\)</span>, <span class="math inline">\(\in\)</span>) along with a function <span class="math inline">\(\text{ar:}\ S\to \mathbb {N}_{0}\)</span> that assign a natural number <span class="math inline">\(n\)</span> as arity to each symbol. A nullary function symbol is called a <strong>constant symbol</strong>.</p></li>
<li><p>The <strong>interpretation function</strong> assigns functions and relations to each symbol of the signature.</p></li>
</ol></div></div></div>
<a id="more"></a>
<p><img src="space.png" /></p>
<h1 id="history">History</h1>
<div class="tabs" id="history"><ul class="nav-tabs"><li class="tab"><a href="#history-1">Ancient Greek</a></li><li class="tab"><a href="#history-2">17th Century</a></li><li class="tab"><a href="#history-3">19th Century</a></li><li class="tab active"><a href="#history-4">Contemporary</a></li></ul><div class="tab-content"><div class="tab-pane" id="history-1"><p>In ancient Greek, &quot;space&quot; was a geometric abstraction of the reality. Euclid assumed a small set of intuitively appealing axioms, and deducing many other propositions from these. Euclidean Geometry is also known as Plane Geometry.</p>
<p>Euclidean geometry has two fundamental types of measurements: <strong>angle</strong> and <strong>distance</strong>.</p>
<ul>
<li>The <strong>angle</strong> scale is <strong>absolute</strong>, and the <strong>right angle</strong> is the basic unit; For example, a 45-degree angle would be referred to the half of a right angle.</li>
<li>The <strong>distance</strong> scale is <strong>relative</strong>; A line segment with a certain nonzero length is treated as the unit, then distances are expressed in relation to it.</li>
<li>Measurements of area and volume are derived from distances.</li>
</ul>
<p>Some well known results</p>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 38%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Theorem</th>
<th>Diagram</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Congruence of triangles</strong></td>
<td>Congruence of triangles is determined by specifying two sides and the angle between them (SAS), two angles and the side between them (ASA) or two angles and a corresponding adjacent side (AAS).</td>
<td><img src="congruence.png" /></td>
</tr>
<tr class="even">
<td><strong>Triangle angle sum</strong></td>
<td>The sum of the angles of a triangle is equal to a straight angle (180 degrees).</td>
<td><img src="tri.png" /></td>
</tr>
<tr class="odd">
<td><strong>Pythagorean theorem</strong></td>
<td>In any right triangle, the area of the square whose side is the hypotenuse is equal to the sum of the areas of the squares whose sides are the two legs.</td>
<td><img src="pytha.png" /></td>
</tr>
<tr class="even">
<td><strong>Thales' theorem</strong></td>
<td>If A, B, and C are points on a circle where the line AC is a diameter of the circle, then the angle ABC is a right angle.</td>
<td><img src="thales.png" /></td>
</tr>
</tbody>
</table></div><div class="tab-pane" id="history-2"><p><strong>Analytic geometry</strong> was adopted by René Descartes in 1637. He proposed a coordinate system to definie and represent geometrical shapes in a numerical way, and extract numerical information from those definitions and representations. It's not only compatible with the geometric notions like distance and angle, but also arised new concepts like <em>tangent</em>, <em>normal</em>, <em>intersection</em> etc.</p>
<p>Two equivalence relations are defined in Euclidean geometry: <strong>congruence</strong> and <strong>similarity</strong>.</p>
<ul>
<li>Translations, rotations and reflections transform a figure into congruent figures</li>
<li>Homotheties transform a figure into similar figures. (shown below)</li>
</ul>
<p><img src="homotheties.png" /></p>
<p>A third equivalence relation was introduced in <strong>projective geometry</strong> by Gaspard Monge in 1795. All ellipses, parabolas, and hyperbolas, could turn into circles under appropriate transformations; they all are projectively equivalent figures.</p>
<p>Some noticeable differences between Euclidean geometry and Projective geometry are:</p>
<ol type="1">
<li>Parallel lines can be said to meet in a point at infinity.</li>
<li>Distances and angles cannot appear in theorems of projective geometry since no angles or distance are guaranteed to be preserved after perjective transformation.</li>
<li>The <strong>incidence structure</strong> and the <strong>cross-ratio</strong> are fundamental invariants.</li>
</ol>
<blockquote>
<p>In mathematics, <strong>incidence structure</strong> is an abstract system consisting of two types of objects and a single relationship between these types of objects.</p>
</blockquote>
<p>At that time, mathematical theories still described their objects by some of their properties, which are treated as axioms at the foundations of the theory.</p></div><div class="tab-pane" id="history-3"><p>In the 19th century, some mathematician stated and proved that under some condition, the sum of the three angles of a triangle is well-defined but different from the classical value (180 degrees). This discovery forced the abandonment of the pretensions to the absolute truth of Euclidean geometry.</p>
<p>The essential difference is the nature of <strong>parallel lines</strong>. Suppose within a two-dimensional plane, there is a line <span class="math inline">\(l\)</span> and a point <span class="math inline">\(A\)</span> that not on <span class="math inline">\(l\)</span>.</p>
<ul>
<li>In Euclidean geometry, for any given line <span class="math inline">\(l\)</span> and a point <span class="math inline">\(A\)</span> which is not on <span class="math inline">\(l\)</span>, there is <strong>exactly</strong> one line through A that does not intersect <span class="math inline">\(l\)</span>.</li>
<li>In non-Euclidean geometry, for example hyperbolic geometry, there are infinitely many lines through A not intersecting l; while in elliptic geometry, any line through <span class="math inline">\(A\)</span> intersects <span class="math inline">\(l\)</span>.</li>
</ul>
<p>This discovery forced the abandonment of the pretensions to the absolute truth of Euclidean geometry. It showed that axioms are not &quot;obvious&quot;, nor &quot;implications of definitions&quot;; They are just hypotheses.</p></div><div class="tab-pane active" id="history-4"><p>The original space investigated by Euclid is now called <strong>three-dimensional Euclidean space</strong>. Its axiomatization and primitive notions (such as &quot;point&quot;, &quot;between&quot;, &quot;congruent&quot; etc.) was reformed with <strong>Hilbert's axioms</strong>, <strong>Tarski's axioms</strong> and <strong>Birkhoff's axioms</strong>; Its theorems with computations were described via invariants of transformation groups.</p>
<p>Three-dimensional Euclidean space is defined to be an <strong>affine space</strong>; Three-dimensional projective space is defined as the space of all one-dimensional subspaces (that is, straight lines through the origin) of a four-dimensional vector space.</p>
<p>Every mathematical object parametrized by <span class="math inline">\(n\)</span> real numbers could be treated as a point of the n-dimensional space of all such objects. Then a space now consists of selected mathematical objects treated as points, and selected relationships between these points. Therefore, spaces are just mathematical structures of convenience.</p></div></div></div>
<h1 id="relevant-concepts">Relevant Concepts</h1>
<h2 id="field">Field</h2>
<p>The best known fields are the field of <strong>rational numbers</strong>. Formally, fields is a <strong>set</strong>, along with two binary operations (<strong>addition</strong> and <strong>multiplication</strong>), two unary operations (yielding the <strong>additive inverse</strong> and <strong>multiplicative inverse</strong>), and two nullary operations (the constants <strong>0</strong> and <strong>1</strong>). For all <span class="math inline">\(a, b, c\in \mathbb{F}\)</span>, the following properties must be satisfied:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Associativity of Addition</td>
<td><span class="math inline">\(a + (b + c) = (a + b) + c\)</span></td>
</tr>
<tr class="even">
<td>Commutativity of Addition</td>
<td><span class="math inline">\(a + b = b + a\)</span></td>
</tr>
<tr class="odd">
<td>Identity of Addition</td>
<td><span class="math inline">\(a + 0 = a\)</span></td>
</tr>
<tr class="even">
<td>Inverse of Addition</td>
<td>For each <span class="math inline">\(a\)</span> in <span class="math inline">\(\mathbb{F}\)</span>, there exists an element in <span class="math inline">\(\mathbb{F}\)</span>, denoted <span class="math inline">\(−a\)</span>, <span class="math inline">\(\text{s.t. } a + (−a) = 0\)</span></td>
</tr>
<tr class="odd">
<td>---</td>
<td>---</td>
</tr>
<tr class="even">
<td>Associativity of Multiplication</td>
<td><span class="math inline">\(a · (b · c) = (a · b) · c\)</span></td>
</tr>
<tr class="odd">
<td>Commutativity of Multiplication</td>
<td><span class="math inline">\(a · b = b · a\)</span></td>
</tr>
<tr class="even">
<td>Identity of Multiplication</td>
<td><span class="math inline">\(a · 1 = a\)</span></td>
</tr>
<tr class="odd">
<td>Inverse of Multiplication</td>
<td>For each <span class="math inline">\(a \ne 0\)</span> in <span class="math inline">\(\mathbb{F}\)</span>, there exists an element in <span class="math inline">\(\mathbb{F}\)</span>, denoted by <span class="math inline">\(a^{−1}\)</span> or <span class="math inline">\(1/a\)</span>, $  a · a^{−1} = 1 $</td>
</tr>
<tr class="even">
<td>---</td>
<td>---</td>
</tr>
<tr class="odd">
<td>Distributivity of Multiplication over Addition</td>
<td>$ a · (b + c) = (a · b) + (a · c) $</td>
</tr>
</tbody>
</table>
<h2 id="vector-space">Vector Space</h2>
<p>A vector space over a field <span class="math inline">\(\mathbb{F}\)</span> is a set <span class="math inline">\(V\)</span> together with two binary operations (<strong>vector addition</strong> and scalar multiplication) and eight axioms. Elements of <span class="math inline">\(V\)</span> are called <strong>vectors</strong>. Elements of <span class="math inline">\(\mathbb{F}\)</span> are called <strong>scalars</strong>.</p>
<p>For all <span class="math inline">\(\mathbf{u}, \mathbf{v}, \mathbf{w}\in V\)</span> and <span class="math inline">\(a, b\in \mathbb{F}\)</span>, the following must be satisified:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Associativity of Addition</td>
<td><span class="math inline">\(\mathbf{u} + (\mathbf{v} + \mathbf{w}) = (\mathbf{u} + \mathbf{v}) + \mathbf{w}\)</span></td>
</tr>
<tr class="even">
<td>Commutativity of Addition</td>
<td><span class="math inline">\(\mathbf{v} + \mathbf{u} = \mathbf{u} + \mathbf{v}\)</span></td>
</tr>
<tr class="odd">
<td>Identity of Addition</td>
<td><span class="math inline">\(\mathbf{v} + \mathbf{0} = \mathbf{v}\)</span></td>
</tr>
<tr class="even">
<td>Inverse of Addition</td>
<td>For all <span class="math inline">\(\mathbf{v}\)</span> in <span class="math inline">\(V\)</span>, there exists an element in <span class="math inline">\(\mathbb{V}\)</span>, denoted <span class="math inline">\(−\mathbf{v}\)</span>, <span class="math inline">\(\text{s.t. } \mathbf{v} + (−\mathbf{v}) = \mathbf{0}\)</span></td>
</tr>
<tr class="odd">
<td>---</td>
<td>---</td>
</tr>
<tr class="even">
<td>Compatibility of scalar and field multiplication</td>
<td><span class="math inline">\(a · (b · \mathbf{v}) = (a · b) · \mathbf{v}\)</span></td>
</tr>
<tr class="odd">
<td>Identity of scalar multiplication</td>
<td><span class="math inline">\(\mathbf{1} ·\mathbf{v} = \mathbf{v}\)</span></td>
</tr>
<tr class="even">
<td>Distributivity with respect to vector addition</td>
<td><span class="math inline">\(a(\mathbf{u} + \mathbf{v}) = a\mathbf{u} + a\mathbf{v}\)</span></td>
</tr>
<tr class="odd">
<td>Distributivity with respect to field addition</td>
<td><span class="math inline">\((a + b)\mathbf{v} = a\mathbf{v} + b\mathbf{v}\)</span></td>
</tr>
</tbody>
</table>
<h3 id="linearity">Linearity</h3>
<p>A linear map or linear function <span class="math inline">\(f(x)\)</span> is a function that preserve sums and scalar multiplication. It satisfies:</p>
<ol type="1">
<li>Additivity: <span class="math inline">\(f(x + y) = f(x) + f(y)\)</span></li>
<li>Homogeneity of degree 1: <span class="math inline">\(f(αx) = α f(x) \forall \alpha\)</span>.</li>
</ol>
<h3 id="real-coordinate-space">Real coordinate space</h3>
<p>A real coordinate space of dimension n, written <span class="math inline">\(R^n\)</span> is a special Vector Space. For any natural number <span class="math inline">\(n\)</span>, the set <span class="math inline">\(R^n\)</span> consists of all n-tuples of real numbers. An element of <span class="math inline">\(R^n\)</span> could be written as <span class="math inline">\((x_{1},x_{2},\ldots ,x_{n})\)</span> where each <span class="math inline">\(x_i\)</span> is a real number.</p>
<p>Any n-dimensional real vector space is <strong>isomorphic</strong> to the vector space <span class="math inline">\(R^n\)</span>.</p>
<h3 id="affine-space">Affine Space</h3>
<p>An affine space is a set <span class="math inline">\(A\)</span> together with a vector space <span class="math inline">\(\overrightarrow{A}\)</span>, and an addition operation such that <span class="math inline">\(+ : A\times \overrightarrow{A}\to A\)</span>. The elements of <span class="math inline">\(A\)</span> are called <strong>points</strong> and the elements of <span class="math inline">\(\overrightarrow{A}\)</span> are called <strong>translations</strong>. Hence <span class="math inline">\(\overrightarrow{A}\)</span> is also called its space of translations.</p>
<p>For all <span class="math inline">\(a, b, c \in A, \mathbf{v},\mathbf{w} \in \overrightarrow{A}\)</span>, the following properties must be satisfied:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Right identity</td>
<td><span class="math inline">\(a + \mathbf{0}= a\)</span>, where <span class="math inline">\(\mathbf{0}\)</span> is the zero vector in <span class="math inline">\(\overrightarrow{A}\)</span></td>
</tr>
<tr class="even">
<td>Associativity</td>
<td><span class="math inline">\((a + \mathbf{v})+ \mathbf{w} = a + (\mathbf{v} + \mathbf{w})\)</span> (the second <span class="math inline">\(+\)</span> is the addition in <span class="math inline">\(\overrightarrow{A}\)</span>)</td>
</tr>
<tr class="odd">
<td>Free and transitive action</td>
<td>For every <span class="math inline">\(a\)</span>, the mapping is a bijection</td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 45%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>Corollary</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Existence of one-to-one translations</td>
<td>For every <span class="math inline">\(\mathbf{v}\)</span>, the mapping is a bijection</td>
</tr>
<tr class="even">
<td>Subtraction</td>
<td>For every <span class="math inline">\(a, b\)</span>, there exists a unique <span class="math inline">\(\mathbf{v}\)</span> denoted by <span class="math inline">\(b – a, \text{s.t. } b = a + \mathbf{v}\)</span></td>
</tr>
<tr class="odd">
<td>Subtraction and Weyl's axioms</td>
<td>For every <span class="math inline">\(a, \mathbf{v}\)</span>, there is a unique point <span class="math inline">\(b\)</span> such that <span class="math inline">\(b - a = \mathbf{v}\)</span> <br> <span class="math inline">\((c - b) + (b - a) = c - a\)</span></td>
</tr>
</tbody>
</table>
<p>They define the concepts of lines, subspaces, and parallelism. In an affine space, there is no distinguished point that serves as an origin; No vector has a fixed origin and no vector can be uniquely associated to a point.</p>
<h4 id="affine-subspaces-and-parallelism">Affine subspaces and parallelism</h4>
<p>An affine subspace <span class="math inline">\(B\)</span> of an affine space <span class="math inline">\(A\)</span> is a subset of <span class="math inline">\(A\)</span> such that <span class="math inline">\(\overrightarrow{B}=\{b-a\mid b\in B, a\in B\}\)</span> is a linear subspace of <span class="math inline">\(\overrightarrow{A}\)</span>. The linear space <span class="math inline">\(\overrightarrow {B}\)</span> is called the direction of <span class="math inline">\(B\)</span>. Suppose <span class="math inline">\(P\)</span> is a point of <span class="math inline">\(B\)</span>, then <span class="math inline">\(F=\{P+\mathbf{v} \mid \mathbf{v}\in \overrightarrow {F}\}\)</span></p>
<p>Two subspaces that share the same <strong>direction</strong> are said to be <strong>parallel</strong>.</p>
<h4 id="lines-and-segments">Lines and segments</h4>
<p>A line is a affine subspace of dimension one. A line passing through two distinct points <span class="math inline">\(P\)</span> and <span class="math inline">\(Q\)</span> could be with the form</p>
<p><span class="math inline">\(\{ P+ \lambda {\overrightarrow {PQ}}\mid \lambda \in \mathbb {R} \}\)</span> or <span class="math inline">\(\{O+(1-\lambda ){\overrightarrow {OP}}+\lambda {\overrightarrow {OQ}}\mid \lambda \in \mathbb {R} \}\)</span> where <span class="math inline">\(O\)</span> is an arbitrary point (not necessary on the line).</p>
<p>It follows that there is exactly one line that passes through (contains) two distinct points. This implies that two distinct lines intersect in at most one point.</p>
<p>The line segment joining the points <span class="math inline">\(P\)</span> and <span class="math inline">\(Q\)</span> is the subset of the points denoted <span class="math inline">\(PQ\)</span> or <span class="math inline">\(QP\)</span> such that <span class="math inline">\(PQ=QP=\{P+\lambda {\overrightarrow {PQ}}\mid 0\leq \lambda \leq 1\}\)</span></p>
<h3 id="validity-of-addition-and-subtraction">Validity of Addition and Subtraction</h3>
<table>
<thead>
<tr class="header">
<th>Operation</th>
<th>Vector Space</th>
<th>Affine Space</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Vector + Vector</td>
<td>Vector</td>
<td>Vector</td>
</tr>
<tr class="even">
<td>Vector + Point</td>
<td>N/A</td>
<td>Vector</td>
</tr>
<tr class="odd">
<td>Vector - Vector</td>
<td>Vector</td>
<td>Vector</td>
</tr>
<tr class="even">
<td>Point + Point</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td>Point - Point</td>
<td>N/A</td>
<td>Vector</td>
</tr>
</tbody>
</table>
<h2 id="metric-space">Metric Space</h2>
<p>A <strong>metric space</strong> is an ordered pair <span class="math inline">\((M,d)\)</span> where <span class="math inline">\(M\)</span> is a set and <span class="math inline">\(d\)</span> is a <strong>metric</strong> such that <span class="math inline">\(d : M\times M\to [0,\infty)\)</span> where <span class="math inline">\([0,\infty )\)</span> is the set of non-negative real numbers. Metric defines the <strong>distance</strong> between each pair of point elements on <span class="math inline">\(M\)</span>.</p>
<h3 id="metric">Metric</h3>
<p>For all <span class="math inline">\(x,y,z\in M\)</span>, the following three properties must be satisfied:</p>
<ol type="1">
<li>Identity of Indiscernibles: <span class="math inline">\(d(x,y)=0\Leftrightarrow x=y\)</span></li>
<li>Symmetry: <span class="math inline">\(d(x,y)=d(y,x)\)</span></li>
<li>Subadditivity or triangle inequality: <span class="math inline">\(d(x,y)\leq d(x,z)+d(z,y)\)</span></li>
</ol>
<h3 id="completeness">Completeness</h3>
<p>A <em>metric space</em> <span class="math inline">\((X, d)\)</span> in which every Cauchy sequence converges to an element of <span class="math inline">\(X\)</span> is called <strong>complete</strong>.</p>
<blockquote>
<p>Given a metric space <span class="math inline">\((X, d)\)</span>, a sequence <span class="math inline">\(x_{1}, x_{2}, x_{3}, \ldots\)</span> is called a <strong>Cauchy sequence</strong> if for any real number <span class="math inline">\(\epsilon &gt; 0\)</span>, there exists a positive integer <span class="math inline">\(N\)</span> such that <span class="math inline">\(d(x_{m}, x_{n}) &lt; \epsilon \text{ , } \forall m, n &gt; N\)</span></p>
</blockquote>
<p>The <strong>real numbers</strong> are <strong>complete</strong> under the metric induced by the usual absolute value. There are some noticeable counter examples:</p>
<ol type="1">
<li>The rational numbers <span class="math inline">\(\mathbb{Q}\)</span> are not complete given usual distance since some of them may converge to a irrational number. For example, the sequence defined by <span class="math inline">\(x_{0}=1\)</span>, <span class="math inline">\(x_{n+1}={\frac{ x_{n} + {\frac {2}{x_{n}}} } {2}}\)</span> will converge to <span class="math inline">\(\sqrt{2}\)</span></li>
<li>The open interval in the set of real numbers with an ordinary distance in <span class="math inline">\(\mathbb{R}\)</span> is not a complete space as its limit doesn't belong to the interval. For example, given the interval <span class="math inline">\(X = (0, 2)\)</span>, the sequence <span class="math inline">\(x_{n}=1/n\)</span> will converge to <span class="math inline">\(0\)</span>.</li>
</ol>
<h3 id="isometry-and-isomorphic">Isometry and Isomorphic</h3>
<p>An isometry is a distance-preserving transformation between metric spaces. Formally, suppose <span class="math inline">\(X\)</span> and <span class="math inline">\(Y\)</span> be <strong>metric spaces</strong> with <strong>metrics</strong> <span class="math inline">\(d_X\)</span> and <span class="math inline">\(d_Y\)</span>. A map <span class="math inline">\(f : X \to Y\)</span> is <strong>isometry</strong> if</p>
<p><span class="math display">\[d_{Y}(f(a),f(b)) = d_{X}(a,b) \text{  } \forall a,b \in X\]</span></p>
<p>The properties of metric imply injection (<span class="math inline">\(\forall a,b \in X,\;\;f(a)=f(b)\Rightarrow a=b\)</span>).</p>
<p>Two metric spaces <span class="math inline">\(X\)</span> and <span class="math inline">\(Y\)</span> are called <strong>isometric</strong> if there is a bijective isometry from <span class="math inline">\(X\)</span> to <span class="math inline">\(Y\)</span>. Like any other bijection, a global isometry has a function inverse. The inverse of a global isometry is also a global isometry.</p>
<h1 id="normed-vector-space">Normed vector space</h1>
<p>A normed vector space, as the name shown, is a vector space <span class="math inline">\(V\)</span> with a norm <span class="math inline">\(\lVert · \rVert\)</span>. A norm induces a distance by <span class="math inline">\(d(x,y) = \lVert y-x \rVert\)</span>. Therefore, a normed vector space is a metric space.</p>
<h2 id="norm">Norm</h2>
<p>Given a vector space <span class="math inline">\(V\)</span> over a field <span class="math inline">\(\mathbb{F}\)</span> of <span class="math inline">\(\mathbb{R}\)</span> or <span class="math inline">\(\mathbb{C}\)</span>, a <strong>norm</strong> on set <span class="math inline">\(V\)</span> is a function such that</p>
<p><span class="math display">\[\lVert · \rVert : V\to [0,\infty)\]</span></p>
<p>where <span class="math inline">\([0,\infty )\)</span> is the set of non-negative real numbers.</p>
<p>For all <span class="math inline">\(\alpha\in \mathbb{F}\)</span> and all <span class="math inline">\(\mathbf{u}, \mathbf{v}\in V\)</span>, the following three properties must be satisfied:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Triangle Inequality</td>
<td><span class="math inline">\(\lVert \mathbf{u} + \mathbf{v} \rVert ≤ \lVert \mathbf{u}\rVert + \lVert \mathbf{v} \rVert\)</span></td>
</tr>
<tr class="even">
<td>Positive Definite</td>
<td><span class="math inline">\(\lVert \mathbf{v} \rVert = \mathbf{0} \Leftrightarrow \mathbf{v} = \mathbf{0}\)</span></td>
</tr>
<tr class="odd">
<td>Homogeneous/Scalable</td>
<td><span class="math inline">\(\lVert \alpha \mathbf{v} \rVert = \lvert a \rvert · \lVert \mathbf{v} \rVert\)</span></td>
</tr>
</tbody>
</table>
<h1 id="inner-product-space">Inner product space</h1>
<p>An <strong>inner product space</strong> is a vector space <span class="math inline">\(V\)</span> over the field <span class="math inline">\(\mathbb{F}\)</span> together with an inner product. The inner product induces a norm by <span class="math inline">\(\lVert x \rVert = {\sqrt {\langle x,x\rangle }}\)</span>. Therefore, an inner product space is normed vector space as well as a metric space.</p>
<h2 id="inner-product">Inner Product</h2>
<p>Given a vector space <span class="math inline">\(V\)</span> over a field <span class="math inline">\(\mathbb{F}\)</span> of <span class="math inline">\(\mathbb{R}\)</span> or <span class="math inline">\(\mathbb{C}\)</span>, a <strong>inner product</strong> on set <span class="math inline">\(V\)</span> is a function such that</p>
<p><span class="math display">\[&lt; · , · &gt; : V \times V \to F\]</span></p>
<p>For all vectors <span class="math inline">\(\mathbf{x}, \mathbf{y}, \mathbf{z} \in V\)</span> and all scalars <span class="math inline">\(\alpha \in \mathbb{F}\)</span>, the following three properties must be satisified:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Conjugate symmetry</td>
<td><span class="math inline">\(\langle x,y\rangle=\overline{\langle y,x\rangle}\)</span></td>
</tr>
<tr class="even">
<td>Linearity in the first argument</td>
<td><span class="math inline">\(\begin{aligned}\langle ax,y\rangle &amp;=a\langle x,y\rangle \\\langle x+y,z\rangle &amp;=\langle x,z\rangle +\langle y,z\rangle \end{aligned}\)</span></td>
</tr>
<tr class="odd">
<td>Positive definite</td>
<td><span class="math inline">\(\langle x,x \rangle &gt; 0,\quad x\in V\setminus \mathbf {0}\)</span></td>
</tr>
</tbody>
</table>
<h2 id="induced-properties">Induced Properties</h2>
<p>For all <span class="math inline">\(\mathbf{x},\mathbf{y},\mathbf{z}\in V\)</span>:</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>Axiom</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Cauchy–Schwarz inequality</td>
<td><span class="math inline">\(\lvert\langle \mathbf{x},\mathbf{y}\rangle\rvert \leq \lvert \mathbf{x} \rvert \lvert \mathbf{y} \rvert\)</span><br>with equality if and only if <span class="math inline">\(\mathbf{x}\)</span> and <span class="math inline">\(\mathbf{y}\)</span> are linearly dependent.</td>
</tr>
<tr class="even">
<td>Polarization identity</td>
<td><span class="math inline">\(\lVert \mathbf{x} + \mathbf{y} \lVert^{2} = \lVert \mathbf{x} \rVert^{2} + \lVert \mathbf{y} \rVert^{2} + 2 \operatorname{Re} \langle x,y\rangle\)</span></td>
</tr>
<tr class="odd">
<td>Orthogonality</td>
<td>Two vectors are <strong>orthogonal</strong> if their inner product is zero. <br>In a inner product spaces of finite dimension over the reals, the inner product allows defining the <strong>angle</strong> of two nonzero vectors by <span class="math inline">\(\angle(\mathbf{x},\mathbf{y})=\arccos{\frac {\langle \mathbf{x},\mathbf{y}\rangle }{\lVert\mathbf{x}\rVert\lVert\mathbf{y}\rVert}} \text{, and } 0\leq \angle (\mathbf{x},\mathbf{y})\leq \pi\)</span></td>
</tr>
<tr class="even">
<td>Pythagorean theorem</td>
<td>For all <span class="math inline">\(\mathbf{x}, \mathbf{y} \in V \text{ s.t.} \langle\mathbf{x}, \rangle\mathbf{y} = 0\)</span>, then <span class="math inline">\(\lVert \mathbf{x} \rVert^{2}+\lVert \mathbf{y} \rVert^{2} = \lVert \mathbf{x} + \mathbf{y} \rVert^{2}\)</span></td>
</tr>
<tr class="odd">
<td>Parseval's identity</td>
<td>If <span class="math inline">\(\mathbf{x}_1, \ldots, \mathbf{x}_n\)</span> such that <span class="math inline">\(\langle\mathbf{x}_j, \mathbf{x}_k\rangle = 0 \quad \forall j, k \text{ s.t. } j \ne k\)</span>, then <br> <span class="math inline">\(\sum _{i=1}^{n}\|\mathbf{x}_{i}\|^{2}=\left\|\sum _{i=1}^{n}\mathbf{x}_{i}\right\|^{2}\)</span></td>
</tr>
<tr class="even">
<td>Parallelogram law</td>
<td><span class="math inline">\(\|\mathbf{x}+\mathbf{y}\|^{2}+\|\mathbf{x}-\mathbf{y}\|^{2}=2\|\mathbf{x}\|^{2}+2\|\mathbf{y}\|^{2}\)</span></td>
</tr>
<tr class="odd">
<td>Ptolemy's inequality</td>
<td><span class="math inline">\(\|\mathbf{x}-\mathbf{y}\|\|\mathbf{z}\|+\|\mathbf{y}-\mathbf{z}\|\|\mathbf{x}\|\geq \|\mathbf{x}-\mathbf{z}\|\|\mathbf{y}\|\)</span></td>
</tr>
</tbody>
</table>
<h1 id="special-space">Special Space</h1>
<h2 id="banach-space">Banach Space</h2>
<p>A complete normed vector space is called Banach Space</p>
<h2 id="hilbert-space">Hilbert Space</h2>
<p>A complete space with an inner product is called a Hilbert space.</p>
<h2 id="euclidean-vector-space">Euclidean vector space</h2>
<p>Euclidiean space is an <span class="math inline">\(\mathbb{R}^{n}\)</span> space equipped with the dot product. All Euclidean spaces of a given dimension are isomorphic.</p>
<h2 id="euclidean-space">Euclidean Space</h2>
<p>An Euclidean space, denoted by <span class="math inline">\(E\)</span>, is an affine space associated with an Euclidean vector space denoted by <span class="math inline">\(\overrightarrow{E}\)</span>.</p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Algebra</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Space</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-threading in Python</title>
    <url>/multithreading/</url>
    <content><![CDATA[<h1 id="the-impact-of-gil">The impact of GIL</h1>
<p>Before talking about multi-threading in python, you must know the term <strong>GIL</strong> first. GIL, short for Global Interpreter Lock, is a mutex that allows only one thread to hold the control of the Python interpreter.</p>
<p>GIL guarantees the thread-safty of <strong>Reference Counting</strong> ---- the memory management mechanism adoped by Python with low overhead and few performance loss of single-threaded programme. C libraries that are not thread-safe also become easier to integrate.</p>
<p>However, the nature of GIL that prevents CPU-bound threads from executing in parellel results of a performance bottleneck of multi-threaded CPU-bound code.</p>
<a id="more"></a>
<h2 id="example">Example</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">countdown(COUNT)</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Time taken in seconds -&#x27;</span>, end - start)</span><br></pre></td></tr></table></figure>
<p>The code above takes <code>6.20024037361145</code> seconds, whereas</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">t1 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line">t2 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Time taken in seconds -&#x27;</span>, end - start)</span><br></pre></td></tr></table></figure>
<p>takes <code>6.924342632293701</code> seconds. This increase is the result of acquire and release overheads added by the lock.</p>
<h2 id="reference-counting">Reference Counting</h2>
<p>In short, within Python, each object owns have a reference count variable that keeps track of the number of references that point to the object. When this count reaches zero, the memory occupied by the object is released. For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = []</span><br><span class="line">b = a</span><br><span class="line">sys.getrefcount(a)</span><br></pre></td></tr></table></figure>
<p>In the above example, the reference count for the empty list <code>[]</code> was <strong>3</strong>, which are: <code>a</code>, <code>b</code> and the argument passed to <code>sys.getrefcount()</code>.</p>
<p>Compared with other thread-safe memory management like garbage collection, reference counting produces lower overhead and makes few impact on the performance of single-threaded programme.</p>
<h2 id="solution">Solution</h2>
<p>The most popular way is to use a multi-processing approach instead of multi-threading, with more overheads of processing creating and context switching as trade-off. Each task then gets its own process, memory space and Python interpreter; the GIL won’t be a problem any more.</p>
<p>Alternatively you may use other Python interpreters (Jython, IronPython and PyPy etc.) as GIL exists only in CPython.</p>
<h1 id="concurrency-vs-parallelism">Concurrency vs Parallelism</h1>
<p><strong>The Art of Concurrency</strong> defines the difference as</p>
<blockquote>
<p>A system is said to be <strong>concurrent</strong> if it can support two or more actions in progress at the same time. A system is said to be <strong>parallel</strong> if it can support two or more actions executing simultaneously.</p>
</blockquote>
<p><img src="cps.png" /></p>
<h1 id="threading-module-in-python3">threading module in Python3</h1>
<h2 id="threading">threading</h2>
<p>This module defines the following functions:</p>
<ul>
<li><code>threading.active_count()</code>: Return the number of Thread objects currently alive.</li>
<li><code>threading.current_thread()</code>: Return the current Thread object.</li>
<li><code>threading.enumerate()</code> Return a list of all Thread objects (include dummy and deamon threads) currently alive.</li>
<li><code>threading.main_thread()</code>: Return the main Thread object.</li>
<li><code>threading.get_ident()</code>: Return the <strong>thread identifier</strong> of the current thread. It is a nonzero integer and may be recycled when a thread exits and another thread is created.</li>
<li><code>threading.get_native_id()</code>: Return the native Thread ID of the current thread assigned by the Operating System.</li>
</ul>
<h2 id="threading.thread">threading.Thread</h2>
<p>The constructor of threading.Thread is <code>class threading.Thread(group=None, target=None, name=None, args=(), kwargs=&#123;&#125;, *, daemon=None)</code>, where</p>
<ul>
<li><code>group</code> reserved for future extension for <code>ThreadGroup</code>.</li>
<li><code>name</code> is the thread name. By default, it is of the form &quot;Thread-N&quot;.</li>
<li><code>target</code> is the callable object to be invoked by the <code>run()</code> method.</li>
<li><code>args</code> is the argument tuple for the target invocation.</li>
<li><code>kwargs</code> is a dictionary of keyword arguments for the target invocation. Defaults to {}.</li>
<li><code>daemon</code> should be a boolean or <code>None</code> (means inheriting from the current thread).</li>
</ul>
<h3 id="usage">Usage</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    print(x + y)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target = add, args = (<span class="number">1</span>, <span class="number">1</span>, )) <span class="comment"># pass as args list</span></span><br><span class="line">t2 = threading.Thread(target = add, kwargs = dict(x = <span class="number">1</span>, y = <span class="number">1</span>)) <span class="comment"># pass as kwargs</span></span><br></pre></td></tr></table></figure>
<h3 id="life-cycle">Life Cycle</h3>
<p>A thread is considered <strong>'alive'</strong> after <code>start()</code> and before terminated. It could be blocked by calling other thread's <code>join()</code> method or by synchronization mechanism introduced later.</p>
<p>A thread can be flagged as a <strong>&quot;daemon thread&quot;</strong>. Python programme will terminate when only daemon threads are left. Since daemon threads may be abruptly stopped at shutdown, their resources may not be released properly. If you want the threads be stopped gracefully, make them non-daemonic and use a suitable signalling mechanism such as an Event.</p>
<p>A <strong>&quot;Dummy thread&quot;</strong> is a thread of control started outside the threading module, such as directly from C code. They are always considered <strong>alive</strong> and <strong>daemonic</strong>, and cannot be <code>join()</code> since it is impossible to detect the termination of them.</p>
<h4 id="deamon-vs-non-deamon">Deamon vs Non-Deamon</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemon</span>():</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Starting&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_daemon</span>():</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Starting&#x27;</span>)</span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">d = threading.Thread(name = <span class="string">&#x27;daemon&#x27;</span>, target = daemon, daemon = <span class="literal">True</span>)</span><br><span class="line">t = threading.Thread(name = <span class="string">&#x27;non-daemon&#x27;</span>, target = non_daemon)</span><br><span class="line"></span><br><span class="line">d.start()</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Output will be</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemon Starting</span><br><span class="line">non-daemon Starting</span><br><span class="line">MainThread Exiting</span><br><span class="line">non-daemon Exiting</span><br></pre></td></tr></table></figure>
<h4 id="join">Join</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemon</span>():</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Starting&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_daemon</span>():</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Starting&#x27;</span>)</span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">d = threading.Thread(name = <span class="string">&#x27;daemon&#x27;</span>, target = daemon, daemon = <span class="literal">True</span>)</span><br><span class="line">t = threading.Thread(name = <span class="string">&#x27;non-daemon&#x27;</span>, target = non_daemon)</span><br><span class="line"></span><br><span class="line">d.start()</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">d.join()</span><br><span class="line">t.join()</span><br><span class="line"></span><br><span class="line">print(threading.current_thread().name + <span class="string">&#x27; Exiting&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Output will be</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemon Starting</span><br><span class="line">non-daemon Starting</span><br><span class="line">non-daemon Exiting</span><br><span class="line">daemon Exiting</span><br><span class="line">MainThread Exiting</span><br></pre></td></tr></table></figure>
<h3 id="api">API</h3>
<ul>
<li><code>.start()</code>: Start the thread. A <code>RuntimeError</code> will raise if the same thread object is called more than once.</li>
<li><code>.run()</code>: The default <code>run()</code> will invoke the callable object passed to the <code>target</code>.</li>
<li><code>.join(timeout=None)</code> Wait until the called thread terminates or TIMEOUT. The unit of<code>timeout</code> is second. <code>join()</code> always returns <code>None</code>; User could call <code>is_alive()</code> to check whether it is terminated or a timeout happened. <code>join()</code> will raise a <code>RuntimeError</code> if it will cause a <strong>deadlock</strong>. It is also an error to join() a thread before it has been started and attempts to do so raise the same exception.</li>
<li><code>name</code>: Return the <strong>name</strong> of current thread. Multiple threads may be given the same name.</li>
<li><code>ident</code>: Return the the <strong>thread identifier</strong> of this thread or None if the thread has not been started.</li>
<li><code>native_id</code>: Return the native integral thread ID of this thread.</li>
<li><code>is_alive()</code>: Return whether the thread is alive.</li>
<li><code>daemon</code>: Return whether this thread is a daemon thread (True) or not (False). This must be set before <code>start()</code> is called.</li>
</ul>
<h2 id="subclassing-thread">Subclassing Thread</h2>
<p>The subclass must override the function <code>run()</code>; If it's required to overrides the constructor, the base class constructor (Thread.__init__()) must be invoked before anything else.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithArgs</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, group=None, target=None, name=None, args=(<span class="params"></span>), kwargs=None</span>):</span></span><br><span class="line">        threading.Thread.__init__(self, group=group, target=target, name=name)</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(threading.current_thread().name + \</span><br><span class="line">        <span class="string">&#x27; running with &#123;0&#125; and &#123;1&#125;&#x27;</span>.format(self.args, self.kwargs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = MyThreadWithArgs(args=(i, ), kwargs=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;B&#x27;</span>&#125;)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<p>Output will be</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Thread<span class="number">-1</span> running <span class="keyword">with</span> (<span class="number">0</span>,) <span class="keyword">and</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">Thread<span class="number">-2</span> running <span class="keyword">with</span> (<span class="number">1</span>,) <span class="keyword">and</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">Thread<span class="number">-3</span> running <span class="keyword">with</span> (<span class="number">2</span>,) <span class="keyword">and</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">Thread<span class="number">-4</span> running <span class="keyword">with</span> (<span class="number">3</span>,) <span class="keyword">and</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">Thread<span class="number">-5</span> running <span class="keyword">with</span> (<span class="number">4</span>,) <span class="keyword">and</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="thread.timer">Thread.Timer</h2>
<p><code>Timer</code> is a subclass of <code>Thread</code> with a constructor <code>class threading.Timer(interval, function, args=None, kwargs=None)</code>. A Timer starts its work after a delay, and can be stopped (even before its action has begun) by calling the <code>cancel()</code> method.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delayed</span>(<span class="params">t</span>):</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Starting at time &#x27;</span> + str(t))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(threading.current_thread().name + <span class="string">&#x27; Existing&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t1 = threading.Timer(<span class="number">1</span>, delayed, args = (<span class="number">1</span>, ))</span><br><span class="line">t1.name = <span class="string">&#x27;t1&#x27;</span></span><br><span class="line">t2 = threading.Timer(<span class="number">3</span>, delayed, args = (<span class="number">3</span>, ))</span><br><span class="line">t2.name = <span class="string">&#x27;t2&#x27;</span></span><br><span class="line">t3 = threading.Timer(<span class="number">3</span>, delayed, args = (<span class="number">3</span>, ))</span><br><span class="line">t3.name = <span class="string">&#x27;t3&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;starting timers&#x27;</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br><span class="line">print(<span class="string">&#x27;waiting before canceling &#123;0&#125;&#x27;</span>.format(t2.name))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&#x27;canceling &#123;0&#125;&#x27;</span>.format(t1.name))</span><br><span class="line">print(<span class="string">&#x27;canceling &#123;0&#125;&#x27;</span>.format(t2.name))</span><br><span class="line">t1.cancel()</span><br><span class="line">t2.cancel()</span><br><span class="line">print(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Output will be</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">starting timers</span><br><span class="line">waiting before canceling t2</span><br><span class="line">t1 Starting at time 1</span><br><span class="line">canceling t1</span><br><span class="line">canceling t2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">t3 Starting at time 3</span><br><span class="line">t1 Existing</span><br><span class="line">t3 Existing</span><br></pre></td></tr></table></figure>
<h1 id="synchronization">Synchronization</h1>
<h2 id="lock">Lock</h2>
<p>Lock is currently the lowest level synchronization primitive available. The code block surrounded by <code>.acquire()</code> and <code>.release()</code> is called the <strong>critical section</strong> and is protected to only run in one thread at a time.</p>
<p>A primitive lock is in one of the two states: <code>&quot;locked&quot;</code> or <code>&quot;unlocked&quot;</code> and starts with a <code>unlocked</code> state, <code>.aquired()</code> will change an <code>unlocked</code> to <code>locked</code> and will be blocked by a <code>locked</code> lock. <code>.release()</code> will change a <code>locked</code> to <code>unlocked</code>. All methods are executed atomically.</p>
<p><code>class threading.Lock</code></p>
<ul>
<li><code>.acquire(blocking=True, timeout=-1)</code> Acquire a lock, blocking or non-blocking.
<ul>
<li>When <code>blocking = True</code>, acquiring a <code>locked</code> lock will make the thread be blocked until the lock is released; then <code>.acquire()</code> will lock it and return <code>True</code>.</li>
<li>When <code>blocking = False</code>, acquiring a <code>locked</code> lock will return <code>False</code> immediately without any blocking.</li>
<li>The floating-point <code>timeout</code> should be used with <code>blocking = True</code>.</li>
</ul></li>
<li><code>.release()</code>: Release a lock. This can be called from any thread, not only the thread. Trying releasing an unlocked lock will cause a <code>RuntimeError</code>.</li>
<li><code>.locked()</code>: Return whether the lock is locked.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading </span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line">deposit = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_profit</span>():</span> </span><br><span class="line">    <span class="keyword">global</span> deposit</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            deposit += <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay_bill</span>():</span> </span><br><span class="line">    <span class="keyword">global</span> deposit</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            deposit -= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">thread1 = threading.Thread(target = add_profit, args = ())</span><br><span class="line">thread2 = threading.Thread(target = pay_bill, args = ())</span><br><span class="line"></span><br><span class="line">thread1.start() </span><br><span class="line">thread2.start() </span><br><span class="line"></span><br><span class="line">thread1.join()</span><br><span class="line">thread2.join()</span><br><span class="line"></span><br><span class="line">print(deposit)</span><br></pre></td></tr></table></figure>
<h3 id="rlock">RLock</h3>
<p>A reentrant lock must be released by the thread that acquired it. Once a thread has acquired a reentrant lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it.</p>
<h2 id="semaphore">Semaphore</h2>
<p>Semaphore is one of the oldest synchronization primitives in the history of computer science. It manages an internal <strong>counter</strong> which is decremented by each <code>.acquire()</code> and incremented by <code>.release()</code>. When the counter become zero, <code>.acquire()</code> my block the thread and wait for a <code>.release()</code></p>
<p><code>class threading.Semaphore(value=1)</code></p>
<ul>
<li><code>value</code> is the initial value of the counter. If the value given is less than 0, ValueError is raised.</li>
<li><code>.acquire(blocking=True, timeout=None)</code> Acquire a semaphore.</li>
<li><code>.release()</code> Release a semaphore.</li>
<li><code>class threading.BoundedSemaphore(value=1)</code> is a subclass that at any time the value of counter will not exceed its initiali value otherwise <code>ValueError</code> will be raise.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(ThreadPool, self).__init__()</span><br><span class="line">        self.active = []</span><br><span class="line">        self.lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeActive</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            self.active.append(name)</span><br><span class="line">            print(<span class="string">&#x27;Running: &#123;0&#125;&#x27;</span>.format(self.active))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeInactive</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            self.active.remove(name)</span><br><span class="line">            print(<span class="string">&#x27;Running: &#123;0&#125;&#x27;</span>.format(self.active))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">s, pool</span>):</span></span><br><span class="line">    <span class="keyword">with</span> s:</span><br><span class="line">        name = threading.currentThread().getName()</span><br><span class="line">        pool.makeActive(name)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        pool.makeInactive(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPool()</span><br><span class="line">s = threading.Semaphore(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=f, name=<span class="string">&#x27;thread_&#x27;</span>+str(i), args=(s, pool))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Running: [<span class="string">&#x27;thread_0&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_0&#x27;</span>, <span class="string">&#x27;thread_1&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_0&#x27;</span>, <span class="string">&#x27;thread_1&#x27;</span>, <span class="string">&#x27;thread_2&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_1&#x27;</span>, <span class="string">&#x27;thread_2&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_1&#x27;</span>, <span class="string">&#x27;thread_2&#x27;</span>, <span class="string">&#x27;thread_3&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_1&#x27;</span>, <span class="string">&#x27;thread_3&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_3&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_3&#x27;</span>, <span class="string">&#x27;thread_4&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_3&#x27;</span>, <span class="string">&#x27;thread_4&#x27;</span>, <span class="string">&#x27;thread_5&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_4&#x27;</span>, <span class="string">&#x27;thread_5&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_4&#x27;</span>, <span class="string">&#x27;thread_5&#x27;</span>, <span class="string">&#x27;thread_6&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_4&#x27;</span>, <span class="string">&#x27;thread_6&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_6&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_6&#x27;</span>, <span class="string">&#x27;thread_7&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_6&#x27;</span>, <span class="string">&#x27;thread_7&#x27;</span>, <span class="string">&#x27;thread_8&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_7&#x27;</span>, <span class="string">&#x27;thread_8&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_7&#x27;</span>, <span class="string">&#x27;thread_8&#x27;</span>, <span class="string">&#x27;thread_9&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_8&#x27;</span>, <span class="string">&#x27;thread_9&#x27;</span>]</span><br><span class="line">Running: [<span class="string">&#x27;thread_9&#x27;</span>]</span><br><span class="line">Running: []</span><br></pre></td></tr></table></figure>
<h2 id="condition-variable">Condition Variable</h2>
<p>A condition variable allows one or more threads to wait until they are notified by another thread. It is always associated with a lock, whether be passed in initialization of be created by default. Passing one in is useful when several condition variables must share the same lock. <code>with</code> statement implicitly calls <code>.acquire()</code> and <code>release()</code> of the associated lock.</p>
<p><code>wait()</code> will release the lock, and then block the thread until another thread invokes <code>notify()</code> or <code>notify_all()</code>. <code>notify()</code> and <code>notify_all()</code> will wake up one and all of the threads waiting for the condition variable respectively. They don’t actually release the lock.</p>
<p><code>class threading.Condition(lock=None)</code></p>
<ul>
<li><code>lock</code> must be a Lock or RLock object. Otherwise, a new RLock object is created and used as the associated lock.</li>
<li><code>acquire(*args)</code> Acquire the associated lock.</li>
<li><code>release()</code> Release the associated lock.</li>
<li><code>wait(timeout=None)</code> Release the associated lock, wait until notified or timeout. Once awakened or timed out, it re-acquires the lock and returns. It must be invoked after acquire the associated, otherwise a <code>RuntimeError</code> is raised.</li>
<li><code>wait_for(predicate, timeout=None)</code> Equivalent to <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> predicate():</span><br><span class="line">    cv.wait()</span><br></pre></td></tr></table></figure></li>
<li><code>notify(n=1)</code> Wake up at most <code>n</code> threas waiting for the condition variable. If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised.</li>
<li><code>notify_all()</code> Wake up all threads waiting on this condition. If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.list = []</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produce</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Producer add an item...&quot;</span>)</span><br><span class="line">        self.list.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consume</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Consumer remove an item ...&quot;</span>)</span><br><span class="line">        self.list.pop(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNotEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> len(self.list) &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">si, cond</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        time.sleep(i)</span><br><span class="line">        print(<span class="string">&quot;Producer acquiring lock...&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> cond:</span><br><span class="line">            si.produce(i)</span><br><span class="line">            cond.notify()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">si, cond</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Consumer acquiring lock...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> cond:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            val = cond.wait_for(si.isNotEmpty, <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> val:</span><br><span class="line">                si.consume()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;No further item to consume...&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cond = threading.Condition()</span><br><span class="line">si = SomeItem()</span><br><span class="line">p = threading.Thread(target=producer, args=(si,cond,))</span><br><span class="line">p.start()</span><br><span class="line">c = threading.Thread(target=consumer, args=(si,cond,))</span><br><span class="line">c.start()</span><br><span class="line">p.join()</span><br><span class="line">c.join()</span><br><span class="line">print(<span class="string">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="event">Event</h2>
<p>An event object manages an internal flag that can be set to true with the <code>set()</code> method and reset to false with the <code>clear()</code> method. The <code>wait()</code> method blocks until the flag is true. The flag is initially false.</p>
<p><code>class threading.Event</code></p>
<ul>
<li><code>is_set()</code></li>
<li><code>set()</code> Set the internal flag to true. All threads waiting for will be awakened.</li>
<li><code>clear()</code></li>
<li><code>wait(timeout=None)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_event_timeout</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.isSet():</span><br><span class="line">        print(<span class="string">&#x27;Wait_for_event_timeout starting&#x27;</span>)</span><br><span class="line">        event_is_set = e.wait(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> event_is_set:</span><br><span class="line">            print(<span class="string">&#x27;Processing event&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;Timeout, re-trying&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e = threading.Event()</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=wait_for_event_timeout)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Waiting before calling Event.set()&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">e.set()</span><br><span class="line">print(<span class="string">&#x27;Event is set&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Wait_for_event_timeout starting</span><br><span class="line">Waiting before calling Event.set()</span><br><span class="line">Timeout, re-trying</span><br><span class="line">Wait_for_event_timeout starting</span><br><span class="line">Event is <span class="built_in">set</span></span><br><span class="line">Processing event</span><br></pre></td></tr></table></figure>
<h2 id="barrier">Barrier</h2>
<p>This class provides a simple synchronization primitive for use by a fixed number of threads that need to wait for each other. Each of the threads tries to pass the barrier by calling the <code>wait()</code> method and will block until all of the threads have made their <code>wait()</code> calls. At this point, the threads are released simultaneously.</p>
<p>The barrier can be reused any number of times for the same number of threads.</p>
<h3 id="constructor">Constructor</h3>
<p><code>class threading.Barrier(n, action=None, timeout=None)</code></p>
<ul>
<li><code>n</code> Number of threads that required to pass the barrier.</li>
<li><code>action</code> is a callable to be called by one of the threads when they are released.</li>
<li><code>timeout</code> is the default timeout value.</li>
</ul>
<h3 id="api-1">API</h3>
<ul>
<li><code>.wait(timeout=None)</code> Wait to pass the barrier. When all the threads party to the barrier have called this function, they are all released simultaneously. The return value is an integer in the range <code>0</code> to <code>n – 1</code>. If the call times out, the barrier is put into the broken state and raise a <code>BrokenBarrierError</code> exception.</li>
<li><code>.reset()</code> Reset the barrier to the default, empty state. Any threads waiting on it will receive the <code>BrokenBarrierError</code> exception.</li>
<li><code>.abort()</code> Put the barrier into a broken state. This causes any active or future calls to wait() to fail with the <code>BrokenBarrierError</code> exception.</li>
<li><code>.parties</code> The number of threads required to pass the barrier.</li>
<li><code>.n_waiting</code> The number of threads currently waiting in the barrier.</li>
<li><code>.broken</code> A boolean that is True if the barrier is in the broken state.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading </span><br><span class="line">  </span><br><span class="line">barrier = threading.Barrier(<span class="number">3</span>) </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(threading.current_thread().name + <span class="string">&quot; is Waiting&quot;</span>) </span><br><span class="line">    barrier.wait() </span><br><span class="line">          </span><br><span class="line">t1 = threading.Thread(target = func)</span><br><span class="line">t2 = threading.Thread(target = func)</span><br><span class="line">  </span><br><span class="line">t1.start() </span><br><span class="line">t2.start() </span><br><span class="line"></span><br><span class="line">print(threading.current_thread().name + <span class="string">&quot;is Waiting&quot;</span>) </span><br><span class="line">barrier.wait() </span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Exit\n&quot;</span>) </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Thread-1 is Waiting</span><br><span class="line">Thread-2 is Waiting</span><br><span class="line">MainThreadis Waiting</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure>
<h2 id="queue">Queue</h2>
<p>The queue module implements multi-producer, multi-consumer queues. The Queue class in this module implements all the required locking semantics.</p>
<p>The module implements three types of queue, which differ only in the order in which the entries are retrieved. FIFO queue, LIFO queue, priority queue.</p>
<h3 id="constructor-1">Constructor</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span>.<span class="title">Queue</span>(<span class="params">maxsize=<span class="number">0</span></span>) </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">queue</span>.<span class="title">LifoQueue</span>(<span class="params">maxsize=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">queue</span>.<span class="title">PriorityQueue</span>(<span class="params">maxsize=<span class="number">0</span></span>)</span></span><br></pre></td></tr></table></figure>
<p>Where if <code>maxsize</code> is less than or equal to zero, the queue size is infinite.</p>
<h3 id="exception">Exception</h3>
<ul>
<li><code>queue.Empty</code>: Be raised when non-blocking <code>get()</code> or <code>get_nowait()</code> is called on a empty queue.</li>
<li><code>queue.Full</code>: Be raised when non-blocking <code>put()</code> or <code>put_nowait()</code> is called on a full queue.</li>
</ul>
<h3 id="api-2">API</h3>
<ul>
<li><code>.qsize()</code> Return the size of the queue, approximatly.</li>
<li><code>.empty()</code> Return whether the queue is empty, approximatly.</li>
<li><code>.full()</code> Return whether the queue is full, approximatly.</li>
<li><code>.put(item, block=True, timeout=None)</code> Put item into the queue. By default if the queue is full, the thread will be blocked until a free slot is available.</li>
<li><code>.put_nowait(item)</code> Equivalent to put(item, False).</li>
<li><code>.get(block=True, timeout=None)</code> Remove and return an item from the queue. By default if the queue is empty, the thread will be blocked until an item is available.</li>
<li><code>.get_nowait()</code> Equivalent to get(False).</li>
<li><code>.task_done()</code> Indicate that a formerly enqueued task is complete. Used by queue consumer threads. Raises a ValueError if called more times than there were items placed in the queue.</li>
<li><code>Queue.join()</code> Blocks until all items in the queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue and goes down whenever a consumer thread calls <code>task_done()</code>. When the count of unfinished tasks drops to zero, join() unblocks.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, queue</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = q.get()</span><br><span class="line">        print(<span class="string">f&#x27;Working on <span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;Finished <span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br><span class="line">        q.task_done()</span><br><span class="line"></span><br><span class="line"><span class="comment"># turn-on the worker thread</span></span><br><span class="line">threading.Thread(target=worker, daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># send thirty task requests to the worker</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    q.put(item)</span><br><span class="line">print(<span class="string">&#x27;All task requests sent\n&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># block until all tasks are done</span></span><br><span class="line">q.join()</span><br><span class="line">print(<span class="string">&#x27;All work completed&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Multi-threading</tag>
        <tag>Concurrent Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>CG Notes --- Cpt 1. Graphics Pipeline, Numerical issues</title>
    <url>/cg1/</url>
    <content><![CDATA[<h1 id="graphics-api">Graphics API</h1>
<p>Every graphics program needs to be able to use two related APIs: a <strong>graphics API</strong> for visual output and a <strong>user-interface</strong> API to get input from the user. In Java, the graphics and user-interface toolkits are integrated and fully supported as part of the language. In C++, graphics API like DirectX and OpenGL are used to draw shapes, whereas the user-interface API is an independent entity that vary from system to system. In this approach, it is problematic to write portable code, therefore it's common to adopt a third layer to encapsulate the system specific user-interface code.</p>
<h1 id="graphics-pipeline">Graphics Pipeline</h1>
<p>The graphics pipeline can be roughly divided into three part:</p>
<ol type="1">
<li>Vertex Processing</li>
<li>Primitive Processing</li>
<li>Fragment Processing</li>
</ol>
<a id="more"></a>
<p><img src="ppl.png" /></p>
<p>The inputs of the pipeline include</p>
<ul>
<li>A camera with position, orientation, focal length etc. specified</li>
<li>Objects which points, lines, polygons, curves with their geometry and material properties etc.</li>
<li>Light sources with direction, position, color, intensity etc. specified.</li>
<li>Textures and maps that describe the color, normal, metalness etc. of the surfaces.</li>
</ul>
<p>and the output is the per-prxel color values that pass to the framebuffer.</p>
<h2 id="vertex-processing">Vertex Processing</h2>
<h3 id="vertex-assembly">Vertex Assembly</h3>
<p>Vertex assembly pulling vertex attributes from different buffers.</p>
<p><img src="va.png" /></p>
<h3 id="vertex-shader">Vertex Shader</h3>
<p>Vertex shader handles the processing of individual vertices. Formally, it called the <strong>Transform and Lighting</strong> stage, means that its mainly duty is to applys the transformation from <em>model</em> to <em>clip</em> coordinates and to performs additional per-vertex lighting-related computation.</p>
<p><img src="vs.png" /></p>
<h4 id="transformation">Transformation</h4>
<p><span class="math inline">\(P_{clip} = (M_{model-view-projection})(P_{model}) = (M_{projection})(M_{view})(M_{model})(P_{model})\)</span></p>
<p><img src="mvp.png" /></p>
<h4 id="lighting">Lighting</h4>
<ul>
<li>Local illumination: The reflected light that dependent only on the surface and the direct light sources</li>
<li>Global illumination: The reflected light that depend on the surface, direct light sources, and light reflected by other surfaces in the environment towards.</li>
</ul>
<p><img src="lg.png" /></p>
<h3 id="tessellation">Tessellation</h3>
<p>Tessellation is the Vertex Processing stage in the OpenGL rendering pipeline where patches of vertex data are subdivided into smaller Primitives.</p>
<p><img src="t.gif" /></p>
<h3 id="geometry-shader">Geometry Shader</h3>
<p>Geometry Shader governs the processing of Primitives. It takes a single Primitive as input and may output zero or more primitives.</p>
<h3 id="vertex-post-processing">Vertex Post-Processing</h3>
<h4 id="transform-feedback">Transform Feedback</h4>
<p>Transform Feedback is the process of capturing primitives generated by the previous step, recording data from those primitives into Buffer Objects.</p>
<h4 id="clipping-perspective-division-and-viewport-transform">Clipping, Perspective Division, and Viewport Transform</h4>
<ol type="1">
<li>Clipping
<ul>
<li>3D clipping: eliminating all polygons that farther than the far plane or nearer than the near plane.</li>
<li>2D clipping: eliminating the polygons and lines outside the image window.</li>
<li>Other user-defined clipping <img src="cl.png" /></li>
</ul></li>
<li>Perspective Division <span class="math display">\[\begin{pmatrix}x_{ndc}\\y_{ndc}\\z_{ndc}\end{pmatrix} = \begin{pmatrix}{\frac {x_{c}}{w_{c}}}\\{\frac {y_{c}}{w_{c}}}\\{\frac {z_{c}}{w_{c}}}\end{pmatrix}\]</span> where <strong>ndc</strong> shorts for <strong>normalized device coordinates</strong>.</li>
<li>Viewport Transform<br> Given <span class="math inline">\(x, y, width, height, nearVal, farVal\)</span>, the window-space coordinates become <span class="math display">\[\begin{pmatrix}x_{w}\\y_{w}\\z_{w}\end{pmatrix}=\begin{pmatrix}{\begin{aligned}{\frac {width}{2}}x_{ndc}&amp;+x+{\frac {width}{2}}\\{\frac {height}{2}}y_{ndc}&amp;+y+{\frac {height}{2}}\\{\frac{farVal-nearVal}{2}}z_{ndc}&amp;+{\frac{farVal+nearVal}{2}}\end{aligned}}\end{pmatrix}\]</span> <img src="sm.png" /></li>
</ol>
<h3 id="primitive-assembly-and-face-culling">Primitive assembly and Face Culling</h3>
<p><strong>Primitive assembly</strong> is the step to convert a vertex stream into a sequence of base primitives which refers to the interpretation scheme to determine what a stream of vertices represents. For example, a line list of 12 vertices needs to generate 11 <strong>line base primitives</strong>. In OpenGL, the format of a primitive could be a point, line, triangle or quad.</p>
<p><strong>Face Culling</strong> is the process to discard triangles based on their apparent facing which is defined by the winding order of the three points.</p>
<p><img src="fc.png" /></p>
<h3 id="rasterization">Rasterization</h3>
<p>Rasterization is the step to determine which fragments(pixels) a primitive overlaps</p>
<p><img src="r.png" /></p>
<h3 id="fragment-shader">Fragment Shader</h3>
<p>Fragment Shader is the step to assign final color to each fragment (texturing, shading). It may also involve per-fragment lighting.</p>
<p>Lighting vs Shading:</p>
<ul>
<li>Lighting: interaction between light and surface. if per-vertex lighting: do lighting calculations here</li>
<li>Shading: interpolating vertex attributes to all fragments assign final color to each fragment</li>
</ul>
<h3 id="per-fragment-processing">Per-fragment Processing</h3>
<p>Per-sample processing operations may take place after or before (under some conditions) the Fragment Shader has executed, in the following order:</p>
<ol type="1">
<li><strong>Pixel ownership test</strong><br> The <strong>Default Framebuffer</strong> (this test only affects rendering to the default framebuffer) is owned by a resource external to OpenGL, so it is possible that particular pixels of the default framebuffer are not owned by OpenGL caused by being partially obscured by another window, such pixels will fail the ownership test and be discarded.</li>
<li><strong>Scissor Test</strong><br> Determine whether given fragment falls outside a certen rectangular region; If so, it will be discarded.</li>
<li><strong>Stencil Test</strong><br> Determine whether to discard given fragment based on a bitwise operation between the fragment's stencil value and the stencil value stored in the current Stencil Buffer at that fragment's sample position. It is used for used for various rendering effects like masking and shadows.</li>
<li><strong>Depth test</strong><br> Compare depth value of given fragment and depth value of the framebuffer.</li>
<li><strong>Blending</strong><br> Takes the fragment color outputs and combines them with the colors in the color buffers that these outputs map to.</li>
<li><strong>Dithering</strong><br> Under the fact that there are only finite number of colors, dithering is to map color value to one of the nearest renderable colors.</li>
<li><strong>Logic operation</strong> <br> A operation applied between the Fragment's color values and correspondings color values in the Framebuffer.</li>
<li><strong>Write mask</strong><br> Determine whether allow or prevent color, depth, or stencil components from being written to the current framebuffer.</li>
</ol>
<h1 id="numerical-issues">Numerical Issues</h1>
<p>It was very difficult to handle the edges cases and exceptions in a robust and portable manner until the establishment of IEEE floating-point standard in 1985. Consider about the equation: <span class="math display">\[a = \frac{1}{\frac{1}{b} + \frac{1}{c}}\]</span></p>
<p>In the old days when divide-by-zero resulted in a crash, two <code>if</code> statements would be required to check for small or zero values of <code>b</code> or <code>c</code>. Instead, with IEEE floating-point, if <code>b</code> or <code>c</code> is <code>0</code>, it will assign <code>a</code> to be <code>0</code> as desired which avoids special checks.</p>
<h2 id="special-values">Special Values</h2>
<ol type="1">
<li>Positive infinity <span class="math inline">\(\infty\)</span>: a number that larger than all <strong>other</strong> valid numbers.</li>
<li>Negative infinity <span class="math inline">\(-\infty\)</span>: a number that smaller than all <strong>other</strong> valid numbers.</li>
<li>Not a number <em>NaN</em>: a symbolic entity encoded in floating-point format with two types and two arithmetic rules:
<ul>
<li>Signalling <em>NaN</em> (NANS): a symbol which will signal an invalid operation exception</li>
<li>Quiet <em>NaN</em> (NANQ): a symbol which will propagate the symbol without signalling an exception</li>
<li>Any arithmetic expression that includes <code>NaN</code> results in <code>NaN</code>.</li>
<li>Any Boolean expression involving <code>NaN</code> is <code>false</code>.</li>
</ul></li>
</ol>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 35%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="header">
<th>Special Value</th>
<th>Float Representation</th>
<th>Double Representation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Positive infinity</td>
<td><code>7F800000</code></td>
<td><code>7FF0000000000000</code></td>
</tr>
<tr class="even">
<td>Negative infinity</td>
<td><code>FF800000</code></td>
<td><code>FFF0000000000000</code></td>
</tr>
<tr class="odd">
<td>Signalling NaN</td>
<td>Any bit pattern<br>between <code>7F800001</code> and <code>7FBFFFFF</code><br>or<br>between <code>FF800001</code> and <code>FFBFFFFF</code></td>
<td>Any bit pattern<br>between <code>7FF0000000000001</code> and <code>7FF7FFFFFFFFFFFF</code><br>or<br>between <code>FFF0000000000001</code> and <code>FFF7FFFFFFFFFFFF</code></td>
</tr>
<tr class="even">
<td>Quite NaN</td>
<td>Any bit pattern<br>between <code>7FC00000</code> and <code>7FFFFFFF</code><br>or<br>between <code>FFC00000</code> and <code>FFFFFFFF</code></td>
<td>Any bit pattern<br>between <code>7FF8000000000000</code> and <code>7FFFFFFFFFFFFFFF</code><br>or<br>between <code>FFF8000000000000</code> and <code>FFFFFFFFFFFFFFFF</code></td>
</tr>
</tbody>
</table>
<h2 id="evaluation-of-expression">Evaluation of Expression</h2>
<p>Suppose <code>a</code> is a real number, then</p>
<table>
<thead>
<tr class="header">
<th>Expression</th>
<th>Evaluation</th>
<th>Expression</th>
<th>Evaluation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(a/\infty\)</span></td>
<td><span class="math inline">\(+0\)</span></td>
<td><span class="math inline">\(-a/\infty\)</span></td>
<td><span class="math inline">\(-0\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(a/(-\infty)\)</span></td>
<td><span class="math inline">\(-0\)</span></td>
<td><span class="math inline">\(-a/(-\infty)\)</span></td>
<td><span class="math inline">\(+0\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\infty+\infty\)</span></td>
<td><span class="math inline">\(\infty\)</span></td>
<td><span class="math inline">\(\infty-\infty\)</span></td>
<td><em>NaN</em></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\infty\times\infty\)</span></td>
<td><span class="math inline">\(\infty\)</span></td>
<td><span class="math inline">\(\infty/\infty\)</span></td>
<td><em>NaN</em></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\infty/a\)</span></td>
<td><span class="math inline">\(\infty\)</span></td>
<td><span class="math inline">\(\infty/0\)</span></td>
<td><span class="math inline">\(/infty\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(a/(+0)\)</span></td>
<td><span class="math inline">\(\infty\)</span></td>
<td><span class="math inline">\(0/0\)</span></td>
<td><em>NaN</em></td>
</tr>
</tbody>
</table>
<h1 id="improvement-directions">Improvement Directions</h1>
<ol type="1">
<li>Performance
<ul>
<li>Triangles per second</li>
<li>Pixels fragments per second</li>
</ul></li>
<li>Features
<ul>
<li>Hidden-surface elimination</li>
<li>Image mapping</li>
<li>Antialiasing</li>
</ul></li>
<li>Quality
<ul>
<li>Numeric representation</li>
<li>Image filters</li>
</ul></li>
</ol>
<h2 id="tips">Tips</h2>
<ol type="1">
<li>Pay more attention to memory access patterns than to operation counts. Compute intermediate results as needed on the fly rather than storing them.</li>
<li>Compile in optimized mode.</li>
<li>Use whatever profiling tools exist to find critical bottlenecks. If profiling reveals bottlenecks in numeric computations, examine the assembly code generated by the compiler for missed efficiencies.</li>
<li>Use doubles for geometric computing and floats for color computing and storing.</li>
</ol>
]]></content>
      <categories>
        <category>Computer Graphics</category>
      </categories>
      <tags>
        <tag>Computer Graphics</tag>
        <tag>Graphics Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>Camera Calibration</title>
    <url>/cc/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Camera Calibration</tag>
      </tags>
  </entry>
  <entry>
    <title>Projective Geometry</title>
    <url>/pg/</url>
    <content><![CDATA[<p>Projective geometry exists in <span class="math inline">\(\mathbb R^n\)</span>, same as Euclidean geometry. A <strong>projective line</strong> <span class="math inline">\(\cal P^{1}\)</span> is analogous to a <strong>1D Euclidean world</strong>; a <em>projective plane</em> <span class="math inline">\(\cal P^2\)</span> corresponds to the <strong>Euclidean plane</strong> and a <strong>projective</strong> space <span class="math inline">\(\cal P^{3}\)</span> is related to a <strong>3D Euclidean space</strong>. Under such notions, imaging could be treated as a process that projecting from <span class="math inline">\(\cal P^3\)</span> to <span class="math inline">\(\cal P^2\)</span>.</p>
<p><strong>Euclidean geometry</strong> is actually a subset of <strong>projective geometry</strong>. And there are two geometries between them: <em>similarity</em> and <em>affine</em>. Projective geometry models well the imaging process of a camera because it allows a much larger class of transformations than others mentioned above. As tradeoff, the drawback is that fewer measures are preserved -- certainly not lengths, angles, or parallelism. Projective transformations preserve type (e.g. points remain points and lines remain lines), <strong>incidence</strong> (e.g. whether a point lies on a line), and <strong>cross ratio</strong> only.</p>
<a id="more"></a>
<p>Relationship between transformation, geometry, and preserved property: <img src="relation.png" /></p>
<h1 id="the-projective-plane">The Projective Plane</h1>
<h2 id="four-models">Four Models</h2>
<h3 id="homogeneous-coordinates">Homogeneous coordinates</h3>
<p>A point in an <strong>n</strong>-dimensional Euclidean space is represented as a point in an (<strong>n+1</strong>)-dimensional projective space.</p>
<p>Assume a point <span class="math inline">\([x, y]^T\)</span> in Euclidean plane, the same point in the projective plane will be <span class="math inline">\([\alpha x, \alpha y, \alpha]^T \quad \forall \alpha \ne 0\)</span>. This also indicates that <span class="math inline">\([X,Y,W]^T = [\alpha X, \alpha Y, \alpha W]^T \quad \forall \alpha \ne 0\)</span>. Thus the point <span class="math inline">\([0, 0, 0]^T\)</span> is undefined in projective plane.</p>
<p>For a point <span class="math inline">\([X,Y,W]^T\)</span> in the projective plane, the corresponding point in Euclidean plane is <span class="math inline">\([X/W,Y/W]^T\)</span>. As scaling preserves the position of the point in Euclidean plane. Therefore <span class="math inline">\([X,Y,W]^T\)</span> is called the <strong>homogeneous coordinate</strong> of a point.</p>
<p>The projective plane contains more points than the Euclidean plane (not all points could be transformed back): <span class="math inline">\(W = 0\)</span> make the transform undefined. Points with the form <span class="math inline">\([X, Y, 0]^T\)</span> are called <strong>ideal points</strong>, or <strong>points at infinity</strong>. All the ideal points lie on a line, called the <strong>ideal line</strong>, or <strong>the line at infinity</strong>. Ideal line is represented as <span class="math inline">\([0,0,1]^T\)</span>. Ideal points or lines are considered just like any other points or lines without any special treatment.</p>
<h4 id="dot-product">Dot Product</h4>
<p>The line <span class="math inline">\(ax + by + c = 0\)</span> in Euclidean plane could be expressed as <span class="math inline">\(aX + bY + cW = 0\)</span> where <span class="math inline">\(Wx = X, Wy = Y\)</span>. The parameters of the line keeps invariant: <span class="math inline">\(-a/b\)</span> is the <strong>slope</strong>, <span class="math inline">\(-c/a\)</span> is the <strong>x-intercept</strong>, and <span class="math inline">\(-c/b\)</span> is the <strong>y-intercept</strong>.</p>
<p>The line could be re-written as the format of dot product <span class="math inline">\(\mathbf{u}^T \mathbf{p} = 0\)</span> where <span class="math inline">\(\mathbf{u} = [a, b, c]^T\)</span> and <span class="math inline">\(\mathbf{p} = [X,Y,W]^T\)</span>.</p>
<p>We see that points and lines have the same representation in the projective plane.</p>
<h4 id="cross-product">Cross Product</h4>
<p>Given two lines <span class="math inline">\(\mathbf{u}_1=[a_1,b_1,c_1]^T\)</span> and <span class="math inline">\(\mathbf{u}_2=[a_2,b_2,c_2]^T\)</span>, the intersection is <span class="math inline">\(\mathbf{p}=\mathbf{u}_1\times\mathbf{u}_2\)</span>. If the two lines are parallel, the intersection is simply <span class="math inline">\([b_1c_2-b_2c_1,a_2c_1-a_1c_2,0]^T\)</span>, which is the ideal point associated with the direction whose slope is <span class="math inline">\(-a_1/b_1\)</span>. Similarly, given two points <span class="math inline">\(\mathbf{p}_1\)</span> and <span class="math inline">\(\mathbf{p}_2\)</span>, the equation of the line passing through them is <span class="math inline">\(\mathbf{u}=\mathbf{p}_1\times\mathbf{p}_2\)</span>.</p>
<p><img src="it.png" /></p>
<p>Similarly, if three points lie on the same line:</p>
<p><span class="math display">\[\begin{vmatrix}\mathbf{p}_1 &amp; \mathbf{p}_2 &amp; \mathbf{p}_3 \end{vmatrix} = 0\]</span></p>
<p>If three lines intersect at the same point:</p>
<p><span class="math display">\[\begin{vmatrix}\mathbf{u}_1 &amp; \mathbf{u}_2 &amp; \mathbf{u}_3 \end{vmatrix} = 0\]</span></p>
<h4 id="duality">Duality</h4>
<p>The similarities between points and lines are striking: Their representations are identical; The formula for the intersection of two lines is the same as the formula for the connecting line between two points. The duality exists between points and lines in the projective plane. Any theorem or statement that is true for the projective plane can be reworded by substituting points for lines and lines for points.</p>
<h3 id="ray-space">Ray space</h3>
<p>A point <span class="math inline">\([x, y]^T\)</span> in Euclidean plane could be transformed into <span class="math inline">\([X, Y, W]^T\)</span> in projective plane where <span class="math inline">\(X = Wx, Y = Wy\)</span> which can be visualized as a line in three-dimensional space passing through the origin and the point <span class="math inline">\([X, Y, W]^T\)</span> (exclude the origin). This three-dimensional space is known as the <strong>ray space</strong>. Similarly, a line <span class="math inline">\(\mathbf{u}=[a,b,c]^T\)</span> can be visualized as a plane perpendicular to it as well as passing through the origin (exclude the origin). The ideal line is the horizontal <span class="math inline">\(W=0\)</span> plane, and the ideal points are lines in this plane.</p>
<h3 id="the-unit-sphere">The unit sphere</h3>
<p><span class="math inline">\(\cal P^2\)</span> is actual a two-dimensional space, which is topologically equivalent to a sphere. A point <span class="math inline">\(\mathbf{p}=[X,Y,W]^T\)</span> can be projected onto the unit sphere to obtain the point <span class="math inline">\(\frac{1}{\sqrt{X^2+Y^2+W^2}}[X,Y,W]^T\)</span>. A line <span class="math inline">\(\mathbf{u}=[a,b,c]^T\)</span> is the great circle perpendicular to it. The ideal line is the great circle around the horizontal midsection of the sphere, and the ideal points lie on this circle.</p>
<p><img src="us.gif" /></p>
<h3 id="augmented-affine-plane">Augmented affine plane</h3>
<p>Explicitly, it is defined by the projection from the unit sphere onto the plane <span class="math inline">\(W=1\)</span>. Each point <span class="math inline">\([X,Y,W]\)</span> is thus mapped to the point <span class="math inline">\([\frac{X}{W},\frac{Y}{W},1]\)</span>. Lines return to lines after that. Ideal points and the ideal line are projected, respectively, to points at infinity (one for each direction) and the line at infinity.</p>
<p><img src="aap.gif" /></p>
<h2 id="pencil-of-lines">Pencil of lines</h2>
<p>A set of lines passing through the same point, is a one-dimensional projective space called a pencil of lines.</p>
<h2 id="cross-ratio">Cross Ratio</h2>
<p>Given four collinear points <span class="math inline">\(A, B, C, D\)</span> in <span class="math inline">\(\cal P^2\)</span>, one definition of the cross ratio is the following:</p>
<p><span class="math display">\[(A,B;C,D)={\frac {AC\cdot BD}{BC\cdot AD}}\]</span></p>
<p>where <span class="math inline">\(AC, BD, BC, AD\)</span> is the Euclidean distance between the corresponding points. Given two points <span class="math inline">\(P=[X_i,Y_i,W_i]^T\)</span>, <span class="math inline">\(Q=[X_j,Y_j,W_j]^T\)</span>, then <span class="math display">\[PQ = \sqrt{(\frac{X_i}{W_i}-\frac{X_j}{W_j})^2+(\frac{Y_i}{W_i}-\frac{Y_j}{W_j})^2}\]</span></p>
<p><img src="cr.png" /></p>
<p>If one of the points has a zero entry, simply cancel the terms containing the point. For example, if <span class="math inline">\(W_B=0, W_A,W_C,W_D \ne0\)</span>, then <span class="math inline">\(BC = BD = \infty\)</span>, which cancel each other, i.e. <span class="math inline">\((A,B;C,D)={\frac {AC}{BC}}\)</span></p>
<h3 id="proof-of-invariance-under-projective-transformation">Proof of Invariance under projective transformation</h3>
<p><img src="d.png" /></p>
<p><span class="math display">\[\begin{aligned}
\frac{AC}{BC} \cdot \frac{BD}{AD} &amp;= \frac{S_{AOC}}{S_{BOC}} \cdot \frac{S_{BOD}}{S_{AOD}} \\
&amp;= \frac{\sin \theta_{AOC} \cdot OA \cdot OC} {\sin \theta_{BOC} \cdot OB \cdot OC} \cdot \frac{\sin \theta_{BOD} \cdot OB \cdot OD}{\sin \theta_{AOD} \cdot OA \cdot OD} \\
&amp;= \frac{\sin \theta_{AOC}}{\sin \theta_{BOC}} \cdot \frac{\sin \theta_{BOD}}{\sin \theta_{AOD}}
\end{aligned}\]</span></p>
<h3 id="properties">Properties</h3>
<ol type="1">
<li><span class="math inline">\((A, B; C, D) &lt; 0\)</span> if and only if exactly one of the points <span class="math inline">\(C, D\)</span> lies between the points <span class="math inline">\(A, B\)</span></li>
<li><span class="math inline">\((A, B; C, D) = 1 / (A, B; D, C)\)</span></li>
<li><span class="math inline">\((A, B; C, D) = (C, D; A, B)\)</span></li>
<li><span class="math inline">\((A, C; B, D) = 1 - (A, B; C, D)\)</span></li>
<li><span class="math inline">\((A, B; C, D) ≠ (A, B; C, E) \Leftrightarrow D \ne E\)</span></li>
</ol>
<h2 id="conics">Conics</h2>
<p>The second-order conic sections (ellipses, parabolas, and hyperbolas) lose their distinction in projective geometry because they are all projectively equivalent.</p>
<p>The equation of a conic is given by: <span class="math display">\[\mathbf{p}^TC\mathbf{p} = 0\]</span> or <span class="math display">\[c_{11}X^2 + c_{22}Y^2 + c_{33}W_2 + 2 \cdot c_{12}XY + 2 \cdot c_{13}XW + 2 \cdot c_{23}YW=0\]</span></p>
<p>where <span class="math inline">\(\mathbf{p}\)</span> is a <span class="math inline">\(3 \times 1\)</span> vector and <span class="math inline">\(C\)</span> is a symmetric <span class="math inline">\(3 \times 3\)</span> matrix.</p>
<p>A conic is a self-dual figure: it can be considered as an envelope of tangent lines and the equation for the envelope of lines is <span class="math inline">\(\mathbf{u}^T\frac{C^{-1}}{|C|}\mathbf{u}\)</span>.</p>
<h2 id="absolute-points">Absolute Points</h2>
<p>A circle is a conic satisifies <span class="math inline">\(X^2 + Y^2 + W^2 = 0\)</span>, which intersects the ideal line <span class="math inline">\(W=0\)</span> at <span class="math inline">\(X^2 + Y^2 = 0\)</span>. This equation has two complex roots <span class="math inline">\([1, i, 0]^T\)</span> and <span class="math inline">\([1, -i, 0]^T\)</span>, known as the <strong>absolute points</strong>. Later will show you the absolute points remain invariant under similarity transformations, which makes them useful for determining the angle between two lines.</p>
<h2 id="similarity-transformation">Similarity Transformation</h2>
<p>A transformation is a similarity transformation if and only if it preserves the absolute points, <span class="math inline">\([1, \pm i, 0]^T\)</span>, which is in the form</p>
<p><span class="math display">\[T_{similarity} = \begin{bmatrix}\cos\theta&amp;\sin\theta&amp;t_{13}\\-\sin\theta&amp;\cos\theta&amp;t_{23}\\0&amp;0&amp;t_{33}\end{bmatrix}\]</span></p>
<p>Note that uniform scaling is unimportant, which could be cancelled by dividing <span class="math inline">\(t_{13}, t_{23}, t_{33}\)</span> with the scalar.</p>
<h3 id="proof">Proof</h3>
<ol type="1">
<li>The &quot;only if&quot; is obvious. Given absolute point <span class="math inline">\(\mathbf{p} = [1, i, 0]^T\)</span>: <span class="math display">\[\begin{aligned}T_{similarity}\mathbf{p}&amp;=[\cos\theta+\sin\theta i,-\sin\theta+\cos \theta, 0]\\&amp;=e^{i\theta}[1, i, 0]^T\end{aligned}\]</span> which is equivalent because the scale factor is ignored. Similarly for <span class="math inline">\([1, -i, 0]^T\)</span></li>
<li>The &quot;if&quot; starts with the unrestricted equation for <span class="math inline">\(T\)</span>. Given absolute point <span class="math inline">\(\mathbf{p} = [1, i, 0]^T\)</span>: <span class="math display">\[T\mathbf{p}=T\begin{bmatrix}1\\i\\0\end{bmatrix}=\begin{bmatrix}t_{11}+t_{12}i\\t_{21}+t_{22}i\\t_{31}+t_{32}i\end{bmatrix}=\begin{bmatrix}1\\i\\0\end{bmatrix}\]</span> which yields <span class="math display">\[\begin{aligned}
\frac{t_{11}+t_{12}i}{t_{21}+t_{22}i} &amp;= \frac{1}{i} \\
t_{31} + t_{32}i &amp;= 0
\end{aligned}\]</span> Since elements of <span class="math inline">\(T\)</span> are real number, we get the following constraints: <span class="math display">\[\begin{aligned}
t_{11} &amp;= t_{22} \\
t_{12} &amp;= - t_{21} \\
t_{31} = t_{32} &amp;= 0
\end{aligned}\]</span> Given two arbitrary <span class="math inline">\(t_{11}, t_{12}\)</span>, we can always reparameterize them as <span class="math inline">\(t_{11} = k\cos \theta\)</span> and <span class="math inline">\(t_{12} = k\sin \theta\)</span>, where <span class="math inline">\(\theta\)</span> is an angle and k is a scalar. Multiplying the previous equation by <span class="math inline">\(1/k\)</span>, we then get the similarity matrix.</li>
</ol>
<h2 id="laguerre-formula----angle-and-cross-ratio">Laguerre formula -- Angle and Cross-ratio</h2>
<p>Given two lines <span class="math inline">\(\mathbf{u}_1\)</span> and <span class="math inline">\(\mathbf{u}_2\)</span> which intersect the ideal line at two points, <span class="math inline">\(\mathbf{p}_1\)</span>, <span class="math inline">\(\mathbf{u}_2\)</span>, the cross ratio between these two points and the two absolute points <span class="math inline">\(\mathbf{i}\)</span> and <span class="math inline">\(\mathbf{j}\)</span> yields the directed angle <span class="math inline">\(\theta\)</span> from the second line to the first:</p>
<p><span class="math display">\[\theta = \frac{1}{2i}\log{(\mathbf{p}_1,\mathbf{p}_2;\mathbf{i},\mathbf{j})}\]</span></p>
<h3 id="proof-1">Proof</h3>
<p>Given two lines <span class="math inline">\(\mathbf{u}_1 = [a_1, b_1, c_1]^T\)</span>, <span class="math inline">\(\mathbf{u}_2 = [a_2, b_2, c_2]^T\)</span>, the tangent of the angle between is</p>
<p><span class="math display">\[\begin{aligned}
\tan\theta &amp;= \frac{\sin\theta}{\cos\theta} \\
&amp;= \frac{\begin{bmatrix}\frac{a_1}{c_1}\\\frac{b_1}{c_1}\end{bmatrix}\times\begin{bmatrix}\frac{a_2}{c_2}\\\frac{b_2}{c_2}\end{bmatrix}}{\begin{bmatrix}\frac{a_1}{c_1}\\\frac{b_1}{c_1}\end{bmatrix}\cdot\begin{bmatrix}\frac{a_2}{c_2}\\\frac{b_2}{c_2}\end{bmatrix}} \\
&amp;= \frac{a_1b_2 - a_2b_1}{a_1a_2 + b_1b_2}
\end{aligned}\]</span></p>
<p>In projective plane. the intersections with the ideal line <span class="math inline">\([0, 0, 1]^T\)</span> are <span class="math inline">\(\mathbf{p}_1 = [1, -\frac{a_1}{b_1}, 0]^T\)</span> and <span class="math inline">\(\mathbf{p}_2 = [1, -\frac{a_2}{b_2}, 0]^T\)</span> (via cross product). Then</p>
<p><span class="math display">\[\begin{aligned}
(\mathbf{p}_1,\mathbf{p}_2;\mathbf{i},\mathbf{j}) &amp;= \frac{\frac{a_1}{b_1} + i}{\frac{a_1}{b_1} - i} \cdot \frac{\frac{a_2}{b_2} - i}{\frac{a_2}{b_2} + i} \\
&amp;= \frac{(a_1a_2 + b_1b_2) + (a_2b_1 - a_1b_2)i}{(a_1a_2 + b_1b_2) + (a_1b_2 - a_2b_1)i} \\
&amp;= e^{2i \arctan \tan\theta}
\end{aligned}\]</span></p>
<h2 id="collineations">Collineations</h2>
<p>A collineation of <span class="math inline">\(\cal P^2\)</span> is a <strong>transformation</strong> from the plane to itself where the collinearity of any set of points is preserved. It can be achieved by multiplicating with a <span class="math inline">\(3 \times 3\)</span> matrix <span class="math inline">\(T\)</span> such that <span class="math inline">\(\mathbf{p} &#39; = T \mathbf{p}\)</span></p>
<p>Only eight elements of <span class="math inline">\(T\)</span> are independent as <strong>scaling is unimportant</strong>; Four pairs of corresponding points are necessary to determine <span class="math inline">\(T\)</span>.</p>
<p>When transforming a line <span class="math inline">\(\mathbf{u}\)</span> to a line <span class="math inline">\(\mathbf{u}&#39;\)</span>, the collinearity must be preserved, that is, if a point <span class="math inline">\(\mathbf{p}\)</span> lies on the line <span class="math inline">\(\mathbf{u}\)</span>, then <span class="math inline">\(\mathbf{u}&#39;\)</span> must lie on <span class="math inline">\(\mathbf{u}&#39;\)</span>. Given <span class="math inline">\(\mathbf{u}\)</span> and <span class="math inline">\(T\)</span>, the points on <span class="math inline">\(\mathbf{u}\)</span> satisify <span class="math inline">\(\mathbf{u}^T\mathbf{p} = 0\)</span>, then</p>
<p><span class="math display">\[
\begin{aligned}
\mathbf{p}^T\mathbf{u} = ({T^{-1}\mathbf{p}}^T)(\mathbf{p}&#39;) = (\mathbf{p}^T)(T^{-T}\mathbf{u}) &amp;= 0 \\
\mathbf{u}&#39; &amp;= T^{-T}\mathbf{u}
\end{aligned}
\]</span></p>
<p>Similarly, a point conic <span class="math inline">\(C\)</span> transforms to <span class="math inline">\(T^{-T}CT^{-1}\)</span>, and a line conic <span class="math inline">\(\frac{|C|}{C^{-1}}\)</span> transforms to <span class="math inline">\(T\frac{C^{-1}}{|C|}T^T\)</span>.</p>
<h2 id="affine-transformation">Affine Transformation</h2>
<p><span class="math display">\[
T_{projective} = \begin{bmatrix}t_{11} &amp; t_{12} &amp; t_{13} \\
t_{21} &amp; t_{22} &amp; t_{23} \\
0 &amp; 0 &amp; t_{33}\end{bmatrix}
\]</span></p>
<p>The affine plane is just the projective plane minus the ideal line, i.e. the ideal line and the ideal points are preserved:</p>
<p><span class="math display">\[\alpha\begin{bmatrix}X \\ Y \\ 0\end{bmatrix} = T\begin{bmatrix}X \\ Y \\ 0\end{bmatrix}\]</span></p>
<p>where once again only six of these parameters are independent; The <strong>scale is unimportant</strong>.</p>
<h1 id="projective-space">Projective Space</h1>
<p>All of the concepts that we have discussed for the projective plane have analogies in projective space:</p>
<ol type="1">
<li>There is a <strong>duality</strong> between <strong>points</strong> and <strong>planes</strong>, lines are <strong>self-dual</strong>.</li>
<li>A <strong>pencil</strong> of planes is a two-dimensional projective space.</li>
<li>The cross ratio between planes is invariant.</li>
<li>Quadrics play the same role as conics, the absolute conic remains invariant under. similarity transformations, and the Laguerre formula can be used to find the angle between two projection rays.</li>
<li>A point in <span class="math inline">\(\cal P^3\)</span> is represented by a 4-tuple <span class="math inline">\(\mathbf{p} = (X,Y,Z,W)\)</span>, and similarly for a plane <span class="math inline">\(\mathbf n\)</span>. Not surprisingly, a point lies in a plane if and only if <span class="math inline">\(\mathbf{p}^T\mathbf{n}=0\)</span>.</li>
</ol>
<h2 id="line-representation-the-plücker-relations">Line Representation: The Plücker relations</h2>
<p>Given two points <span class="math inline">\(\mathbf{p}_1 = [X_1, Y_1, Z_1, W_1]^T\)</span> and <span class="math inline">\(\mathbf{p}_2 = [X_2, Y_2, Z_2, W_2]^T\)</span>, in Euclidean space, their representation are <span class="math inline">\(\bar{\mathbf{p}}_1 = [X_1/W_1, Y_1/W_1, Z_1/W_1]^T\)</span> and <span class="math inline">\(\bar{\mathbf{p}}_2 = [X_2/W_2, Y_2/W_2, Z_2/W_2]^T\)</span> respectively, and the line passes through these two could be defined by the direction <span class="math inline">\(\bar{\mathbf{p}}_2-\bar{\mathbf{p}}_1\)</span> and the distance from the line to the origin <span class="math inline">\(\bar{\mathbf{p}}_2\times\bar{\mathbf{p}}_1\)</span>. Therefore, we could find <span class="math inline">\(\mathbf{u}=(l_{41}, l_{42},l_{43},l_{23},l_{31},l_{12})\)</span> such that<br />
</p>
<p><span class="math display">\[
\begin{bmatrix} l_{41}\\ l_{42}\\ l_{43}\\ \hline l_{23}\\ l_{31}\\ l_{12} \end{bmatrix} = \begin{bmatrix} \bar{\mathbf{p}}_2-\bar{\mathbf{p}}_1 \\ \hline \bar{\mathbf{p}}_2\times\bar{\mathbf{p}}_1 \end{bmatrix} = \begin{bmatrix} \frac{X_2}{W_2} - \frac{X_1}{W_1} \\ \frac{Y_2}{W_2} - \frac{Y_1}{W_1} \\ \frac{Z_2}{W_2} - \frac{Z_1}{W_1} \\ \hline \frac{Y_1Z_2 - Y_2Z_1}{W_1W_2} \\ \frac{Z_1X_2 - Z_2X_1}{W_1W_2} \\ \frac{X_1Y_2 - X_2Y_1}{W_1W_2} \end{bmatrix} = \frac{1}{W_1W_2} \begin{bmatrix} W_1X_2 - W_2X_1 \\ W_1Y_2 - W_2Y_1 \\ W_1Z_2 - W_2Z_1 \\ \hline Y_1Z_2 - Y_2Z_1\\ Z_1X_2 - Z_2X_1 \\ X_1Y_2 - X_2Y_1 \end{bmatrix}\]</span></p>
<p>It's clear that <span class="math inline">\(l_{ij}\)</span> is determined by the determinant of the i_th and j_th rows of the two points. And the six parameters are not independent to each other as <span class="math inline">\((\bar{\mathbf{p}}_2-\bar{\mathbf{p}}_1) \cdot (\bar{\mathbf{p}}_2\times\bar{\mathbf{p}}_1) = 0\)</span></p>
<h2 id="line-intersection">Line Intersection</h2>
<p>Given two lines <span class="math inline">\(\mathbf{u}\)</span> and <span class="math inline">\(\mathbf{u}&#39;\)</span>, two points <span class="math inline">\(\mathbf{p}_1\)</span>, <span class="math inline">\(\mathbf{p}_2\)</span> lie on <span class="math inline">\(\mathbf{u}\)</span> and two points <span class="math inline">\(\mathbf{p}_1&#39;\)</span>, <span class="math inline">\(\mathbf{p}_2&#39;\)</span> lie on <span class="math inline">\(\mathbf{u}&#39;\)</span>, the two line intersect if and only if the <span class="math inline">\(4\times4\)</span> determinant <span class="math inline">\(\begin{vmatrix} \mathbf{p}_1 &amp;\mathbf{p}_2 &amp; \mathbf{p}_1&#39; &amp; \mathbf{p}_2&#39; \end{vmatrix}\)</span> is zero. (They could define a plane, equivalently, <span class="math inline">\(\mathbf{u}\cdot(\mathbf{p}_2&#39;\times\mathbf{p}_1&#39;) = \mathbf{u}&#39;\cdot(\mathbf{p}_2\times\mathbf{p}_1)\)</span>). Under the Plücker coordinates it will be <span class="math display">\[(l_{41}l_{23}&#39;+l_{41}&#39;l_{23}) + (l_{42}l_{31}&#39;+l_{42}&#39;l_{31}) + (l_{43}l_{12}&#39;+l_{43}&#39;l_{12}) = 0\]</span></p>
<h1 id="projective-geometry-applied-to-computer-vision">Projective Geometry Applied to Computer Vision</h1>
<p>The main areas of the application of projective geometry are those in which image formation and/or invariant descriptions between images are important, such as camera calibration, stereo, object recognition, scene reconstruction, mosaicing, image synthesis, and the analysis of shadows. This latter application arises from the fact that the composition of two <strong>perspective projections</strong> is not necessarily a <strong>perspective projection</strong> but is definitely a <strong>projective transformation</strong>; that is, projective transformations form a group, whereas perspective projections do not.</p>
<h2 id="perspective-projection-vs.-perspective-transformation">Perspective Projection vs. Perspective Transformation</h2>
<ol type="1">
<li>Perspective Projection calculates the perspective view of a 3D object onto a 2D projection plane.</li>
<li>Perspective Transformation allows: how the perspectively foreshortened and projected polygons will overlap, without discarding the z-values.</li>
</ol>
<p>The following three sections contain the image formation equations, detailed derivations of the Essential and Fundamental matrices, and an interesting discussion of the interpretation of vanishing points.</p>
<h2 id="image-formation">Image Formation</h2>
<p>Image formation involves the projection of points in <span class="math inline">\(\cal P^3\)</span> (the world) to points in <span class="math inline">\(\cal P^2\)</span> (the image plane). Given the point <span class="math inline">\((X,Y,Z)\)</span> in the <strong>Euclidean</strong> space, the perspective projection equation that forms a point <span class="math inline">\((x,y)\)</span> on the <strong>Euclidean</strong> plane is, <span class="math display">\[\begin{aligned}
x &amp;= -f\frac{X}{Z} \\
y &amp;= -f\frac{Y}{Z}
\end{aligned}\]</span></p>
<p>It is obviously non-linear. Converting to homogeneous coordinates makes it linear.</p>
<p>Given <span class="math inline">\(\mathbf{p}&#39;=[x, y, w]^T\)</span> and <span class="math inline">\(\mathbf{p} = [X, Y, Z, W]\)</span>, the perspective projection matrix T is given by: <span class="math display">\[\mathbf{p}&#39;=T_{perspective}\mathbf{p} = \begin{bmatrix} -f &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; -f &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0
\end{bmatrix}\mathbf{p}\]</span></p>
<p>The entire image formation process includes perspective projection, along with matrices for internal and external calibration:</p>
<p><span class="math display">\[\tilde{P} = T_{internal} T_{perspective} T_{external} = \begin{bmatrix}k_u&amp;k_c&amp;u_0\\0&amp;k_v&amp;v_0\\0&amp;0&amp;1\end{bmatrix}\begin{bmatrix}-f&amp;0&amp;0\\0&amp;-f&amp;0\\0&amp;0&amp;1\end{bmatrix}\begin{bmatrix}R &amp; \mathbf{t}\end{bmatrix}\]</span></p>
<p>where <span class="math inline">\((u_0,v_0)\)</span> is the principal point, <span class="math inline">\(R\)</span> is the <span class="math inline">\(3\times3\)</span> rotation matrix, $ is the <span class="math inline">\(3\times1\)</span> translation vector, <span class="math inline">\(k_u, k_v\)</span> are focal length, <span class="math inline">\(k_c\)</span> is the skew parameter.</p>
]]></content>
  </entry>
</search>
